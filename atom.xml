<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://meredith2328.github.io</id>
    <title>十派的玩具箱</title>
    <updated>2025-08-03T14:17:43.872Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://meredith2328.github.io"/>
    <link rel="self" href="https://meredith2328.github.io/atom.xml"/>
    <subtitle>“能做成的事情是不少的”</subtitle>
    <logo>https://meredith2328.github.io/images/avatar.png</logo>
    <icon>https://meredith2328.github.io/favicon.ico</icon>
    <rights>All rights reserved 2025, 十派的玩具箱</rights>
    <entry>
        <title type="html"><![CDATA[Career advice 丨 职业建议（翻译自 Terence Tao 的博客）]]></title>
        <id>https://meredith2328.github.io/post/career-advice-by-tao/</id>
        <link href="https://meredith2328.github.io/post/career-advice-by-tao/">
        </link>
        <updated>2025-08-01T08:15:08.000Z</updated>
        <content type="html"><![CDATA[<p>原文链接：<br>
<a href="https://terrytao.wordpress.com/career-advice/">Career advice | What's new</a><br>
作者：陶哲轩（Terence Tao）</p>
<p><strong>声明：本页面中的“我”指原作者。仅为了方便个人查阅、而将原页面做了中文翻译，并修订了一些过时链接。翻译时间为2025年8月1日。未取得原作者的版权同意，仅供个人学习使用。一切版权归原作者所有。</strong></p>
<blockquote>
<p><em>Advice is what we ask for when we already know the answer but wish we didn’t.</em> (Erica Jong)</p>
</blockquote>
<p>以下是我收集的关于数学学术职业问题的各种建议，大致按建议在哪个阶段最适用进行排序（当然，有些建议也适用于多个阶段）。</p>
<p>免责声明：这里的建议非常笼统；我并不声称拥有解决所有职业问题的“灵丹妙药”。在做出任何重要的职业决策之前，你当然需要评估许多因素、背景和特定于你自身情况的需求，并运用一定的常识。如果你有导师，我尤其建议你<a href="https://terrytao.wordpress.com/career-advice/talk-to-your-advisor/">与导师讨论这些决定</a>，因为他或她熟悉你的情况，并且很可能能够提供中肯的建议。另外，需要明确的是，这些建议大多是针对数学学术职业的；当然，除此之外还有很多其他职业选择，但我并没有特别明智的建议可以提供。</p>
<ul>
<li>小学阶段
<ul>
<li><a href="https://terrytao.wordpress.com/career-advice/advice-on-gifted-education/">关于天才教育的建议</a>。</li>
</ul>
</li>
<li>高中阶段
<ul>
<li><a href="https://terrytao.wordpress.com/career-advice/advice-on-mathematics-competitions/">关于数学竞赛的建议</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/which-universities-should-one-apply-to/">应该申请哪些大学？</a></li>
</ul>
</li>
<li>本科阶段
<ul>
<li>如何提高<a href="https://terrytao.wordpress.com/career-advice/solving-mathematical-problems/">数学解题能力</a>？需要注意的是，<a href="https://terrytao.wordpress.com/career-advice/theres-more-to-mathematics-than-grades-and-exams-and-methods/">数学不仅仅是成绩、考试和方法</a>；<a href="https://terrytao.wordpress.com/career-advice/theres-more-to-mathematics-than-rigour-and-proofs/">数学也不仅仅是严谨性和证明</a>。<a href="https://terrytao.wordpress.com/career-advice/on-the-importance-of-partial-progress/">重视阶段性进步也很重要，因为它是彻底解决问题的关键基石</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/dont-base-career-decisions-on-glamour-or-fame/">不要以名利来决定职业发展</a>（翻译注：此处原文链接有误，已更正）。<a href="https://terrytao.wordpress.com/career-advice/study-at-different-places/">你应该在不同的地方学习</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/does-one-have-to-be-a-genius-to-do-maths/">一定要成为天才才能在数学上取得成功吗？</a></li>
<li>我2022年在哈维穆德学院毕业生毕业典礼上的致辞（<a href="https://www.youtube.com/watch?v=jE-vY5-3zhU&amp;t=1768s">视频</a>）。</li>
</ul>
</li>
<li>研究生阶段
<ul>
<li><a href="https://terrytao.wordpress.com/career-advice/work-hard/">努力工作</a>，<a href="https://terrytao.wordpress.com/career-advice/be-professional-in-your-work/">专业地工作</a>很重要。但<a href="https://terrytao.wordpress.com/career-advice/enjoy-your-work/">享受工作</a>也很重要。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/think-ahead/">提前思考</a>，了解未来的道路；<a href="https://terrytao.wordpress.com/career-advice/ask-yourself-dumb-questions-and-answer-them/">问自己一些愚蠢的问题</a>，了解过去的道路。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/attend-talks-and-conferences-even-those-not-directly-related-to-your-work/">参加讲座和会议，即使那些与你的工作没有直接关系的</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/talk-to-your-advisor/">与你的导师沟通</a>，但也要<a href="https://terrytao.wordpress.com/career-advice/take-the-initiative/">主动出击</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/dont-prematurely-obsess-on-a-single-big-problem-or-big-theory/">不要过早地沉迷于某个“大问题”或“大理论”</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/write-down-what-youve-done/">写下你所做的工作</a>，并<a href="https://terrytao.wordpress.com/career-advice/make-your-work-available/">公开你的成果</a>。在这方面，我有一些关于<a href="https://terrytao.wordpress.com/advice-on-writing-papers/">如何撰写和提交论文</a>的建议。</li>
<li>“<a href="https://www.ams.org/journals/notices/202007/rnoti-p1007.pdf">千钧一发：一次近乎失败的尝试如何让我走向成功</a>”，陶哲轩，美国数学学会通告，2020年8月。原载于“<a href="https://www.ams.org/about-us/LivingProof.pdf">鲜活的证明：数学征程中的韧性故事</a>”，美国数学学会，2019年。编辑：Allison Henrich、Emille Lawrence、Matthew Pons、David Taylor。</li>
</ul>
</li>
<li>博士后阶段
<ul>
<li><a href="https://terrytao.wordpress.com/career-advice/learn-and-relearn-your-field/">学习并重新学习你的领域</a>，但<a href="https://terrytao.wordpress.com/career-advice/dont-be-afraid-to-learn-things-outside-your-field/">不要害怕学习领域之外的东西</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/learn-the-limitations-of-your-tools/">了解你所用工具的局限性</a>，同时也要<a href="https://terrytao.wordpress.com/career-advice/learn-the-power-of-other-mathematicians-tools/">学习其他数学家的工具的威力</a>。尤其要<a href="https://terrytao.wordpress.com/career-advice/continually-aim-just-beyond-your-current-range/">不断超越你目前的领域</a>。</li>
<li>在你的研究中，要兼顾<a href="https://terrytao.wordpress.com/career-advice/be-flexible/">灵活性</a>和<a href="https://terrytao.wordpress.com/career-advice/be-patient/">耐心</a>。</li>
<li>如果有机会，你绝对应该去旅行并展示你的研究成果。但要<a href="https://terrytao.wordpress.com/career-advice/be-considerate-of-your-audience/">体谅你的听众</a>；<a href="https://terrytao.wordpress.com/career-advice/talks-are-not-the-same-as-papers/">演讲和论文不一样</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/be-sceptical-of-your-own-work/">对自己的工作保持怀疑态度</a>，不要害怕<a href="https://terrytao.wordpress.com/career-advice/use-the-wastebasket/">使用废纸篓</a>。</li>
</ul>
</li>
</ul>
<p>我也正在（慢慢地）从研究数学家的角度整理我对时间管理的想法。</p>
<ul>
<li>以下是关于这个话题的<a href="https://terrytao.wordpress.com/2008/08/07/on-time-management/">一些总体想法</a>。</li>
<li><a href="https://terrytao.wordpress.com/career-advice/batch-low-intensity-tasks-together/">将低强度的任务集中处理</a>，以利用规模经济并减少干扰。</li>
<li><a href="https://terrytao.wordpress.com/2017/07/07/what-are-some-useful-but-little-known-features-of-the-tools-used-in-professional-mathematics/">专业数学家使用的工具有哪些有用但鲜为人知的功能？</a></li>
</ul>
<p>更多建议：</p>
<ul>
<li>John Baez 的 <a href="http://math.ucr.edu/home/baez/advice.html">职业建议页面</a>。</li>
<li>Po Bronson <a href="https://nymag.com/news/features/27840/">关于天赋与努力相对重要性的文章</a>。</li>
<li>Catherine Cannizzo 的 “<a href="https://sites.google.com/view/ccannizzo/postdoc-apps">博士后申请</a>”。</li>
<li>Fan Chung <a href="https://mathweb.ucsd.edu/~fan/teach/gradpol.html">给研究生的建议</a>。</li>
<li>Lance Fortnow 的“<a href="http://weblog.fortnow.com/2007/02/graduate-student-guide.html">研究生指南</a>”。</li>
<li>Oded Goldreich 的 “<a href="https://www.wisdom.weizmann.ac.il/%7Eoded/on-duties.html">论我们作为科学家的职责</a>”。</li>
<li>Richard Hamming 的《<a href="https://www.mccurley.org/advice/hamming_advice.html">天才之举：力求在一切所作所为中追求卓越</a>》。</li>
<li>Matt Might 的《<a href="https://matt.might.net/articles/phd-school-in-pictures/">博士学位图解指南</a>》。</li>
<li>Gian-Carlo Rota 的《<a href="https://www.ams.org/notices/199701/comm-rota.pdf">我希望自己曾被教过的十堂课</a>》。</li>
<li>J. Michael Steele 的《<a href="http://www-stat.wharton.upenn.edu/~steele/Rants/AdviceGS.html">给统计学研究生的建议</a>》。</li>
<li>Ian Stewart 的《<a href="https://www.amazon.com/Letters-Young-Mathematician-Art-Mentoring/dp/0465082319/sr=8-1/qid=1170790056/ref=pd_bbs_1/002-2734562-8194451?ie=UTF8&amp;s=books">给年轻数学家的信</a>》。</li>
<li>Ravi Vakil 的《<a href="https://math.stanford.edu/~vakil/potentialstudents.html">给潜在博士生的建议</a>》。（翻译注：原文标题应为&quot;For potential Ph.D. students&quot;，误为&quot;For potential students&quot;）</li>
<li>Remy van Dobben de Bruyn 的《<a href="https://lovelylittlelemmas.rjprojects.net/timeline-of-postdoc-applications/">博士后申请时间表</a>》。（翻译注：原文此处无链接，该链接通过互联网搜索得到）</li>
<li>Lauren William 的《<a href="https://math.berkeley.edu/~katrin/slides/Williams-FindingJob.pdf">寻找数学博士后职位</a>》。</li>
<li>《<a href="https://press.princeton.edu/books/hardcover/9780691118802/the-princeton-companion-to-mathematics">普林斯顿数学指南</a>》中关于<a href="https://assets.press.princeton.edu/chapters/gowers/gowers_VIII_6.pdf">给年轻数学家的建议</a>部分，由 Michael Atiyah 爵士、Béla Bollobás、Alain Connes、Dusa McDuff 和 Peter Sarnak 共同撰写。</li>
<li><a href="https://www.ams.org/cgi-bin/notices/nxgnotices.pl?fm=gen&amp;cnt=career">AMS 公告中的早期职业文章</a></li>
<li><a href="https://blogs.ams.org/mathgradblog/">AMS 研究生博客</a>（翻译注：原文此处的<a href="http://mathgradblog.williams.edu/">链接</a>已失效，可能是该Blog已于2021年停用，修改为归档链接）</li>
<li><a href="https://math.stackexchange.com/">Mathematics Stack Exchange</a> 上有大量<a href="https://math.stackexchange.com/questions/tagged/career-development?sort=votes&amp;pagesize=15">关于职业发展的问答</a>（您还可以提出该网站尚未提出的问题）。<a href="https://mathoverflow.net/">MathOverflow</a> 上也有<a href="https://mathoverflow.net/questions/tagged?tagnames=career&amp;sort=votes&amp;pagesize=15">关于职业发展的问答</a>。最后，<a href="https://academia.stackexchange.com/">Academia Stack Exchange</a> 上有大量关于所有学术问题（包括职业问题）的问答。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[碎碎念]]></title>
        <id>https://meredith2328.github.io/post/sui-sui-nian/</id>
        <link href="https://meredith2328.github.io/post/sui-sui-nian/">
        </link>
        <updated>2025-07-31T08:43:04.000Z</updated>
        <content type="html"><![CDATA[<p>使用Gridea构建的静态博客有以下不便：</p>
<ol>
<li><strong>加载图片的Markdown代码与Obsidian并不统一。</strong> 我习惯于在Obsidian中编写博客、所见即所得，而由于相关代码不统一，我不能直接将Obsidian的Markdown代码复制入Gridea中，而是需要通过 <code>转换程序</code> 等方式进行处理。如果人工添加，则需要在Gridea右侧的菜单栏按钮中一张一张添加，这是很繁琐的。</li>
</ol>
<p>去掉文件名前缀的转换程序：</p>
<pre><code class="language-python">import os

PREFIX = &quot;Pasted image &quot;

def remove_prefix_from_filename(filename):
    if filename.lower().startswith(PREFIX.lower()):
        return filename[len(PREFIX):]
    return None

def main():
    for filename in os.listdir('.'):
        if os.path.isfile(filename):
            new_name = remove_prefix_from_filename(filename)
            if new_name and not os.path.exists(new_name):
                print(f&quot;Renaming: {filename} -&gt; {new_name}&quot;)
                os.rename(filename, new_name)
            elif new_name and os.path.exists(new_name):
                print(f&quot;Skipping (target exists): {filename} -&gt; {new_name}&quot;)

if __name__ == &quot;__main__&quot;:
    main()
</code></pre>
<p>将obsidian的图片格式转换为Gridea格式的转换程序：</p>
<pre><code class="language-python">import re
import sys

def main(src_path: str, dst_path: str):
    pattern = re.compile(
        r'!\[\[Pasted image ([0-9]{8}[0-9]{6}\.png)\]\]',
        flags=re.IGNORECASE
    )

    with open(src_path, 'r', encoding='utf-8') as f:
        content = f.read()

    new_content = pattern.sub(
        lambda m: f'![](https://meredith2328.github.io/post-images/{m.group(1)})',
        content
    )

    with open(dst_path, 'w', encoding='utf-8') as f:
        f.write(new_content)

    print(f'已处理并保存：{dst_path}')

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('用法：python obsidian2gridea.py &lt;源文件.md&gt; &lt;目标文件.md&gt;')
        sys.exit(1)
    src_file = sys.argv[1]
    dst_file = sys.argv[2]
    main(src_file, dst_file)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MiniTorch的一个实现]]></title>
        <id>https://meredith2328.github.io/post/minitorch/</id>
        <link href="https://meredith2328.github.io/post/minitorch/">
        </link>
        <updated>2025-07-23T08:31:17.000Z</updated>
        <content type="html"><![CDATA[<p>项目文档链接：<a href="https://minitorch.github.io/">MiniTorch</a><br>
项目仓库：<a href="https://github.com/minitorch/minitorch">minitorch/minitorch: The full minitorch student suite.</a></p>
<p>我的实现：<a href="https://github.com/Meredith2328/minitorch">Meredith2328/minitorch: The full minitorch student suite.</a><br>
（完成了Fundamentals, ML Primer, AutoDiff, Tensors, Efficiency部分，未涉及Networks部分。）</p>
<p>另外推荐参考这个，写得比我好得多：<a href="https://dezeming.top/wp-content/uploads/2022/02/MiniTorch-%E5%AD%A6%E4%B9%A0%E5%85%A8%E6%94%BB%E7%95%A5.pdf">MiniTorch-学习全攻略.pdf</a></p>
<h2 id="安装环境">安装环境</h2>
<figure data-type="image" tabindex="1"><img src="https://meredith2328.github.io/post-images/20250702081943.png" alt="" loading="lazy"></figure>
<p>将以下内容保存为requirements.txt并替换原始项目使用的requirements.txt和requirements.txt.extra：</p>
<pre><code>backports.tarfile==1.2.0
colorama==0.4.6
datasets==2.21.0
embeddings==0.0.8
hypothesis==6.111.2
importlib-metadata==6.11.0
importlib-resources==6.4.0
jaraco.text==3.12.1
mypy==1.11.2
numba==0.60.0
plotly==5.24.0
pre-commit==3.8.0
pydot==3.0.1
pytest-env==1.1.3
pytest-runner==6.0.1
python-mnist==0.7
streamlit-ace==0.1.1
tomli==2.0.1
torch==2.4.0
numpy==1.24.0
streamlit==1.26.0
</code></pre>
<p>关于requirements的说明：</p>
<pre><code>conda create -n myminitorch python==3.11
官方setup给的requirements有conflict，参考了pr里的requirements进行了修改
pip install -r requirements.txt
pip install -Ue .
之后发现torch版本很新、自动装的2.0的numpy不兼容，手动降级一下：
pip install numpy==1.24
以及跑Task0.5出了一些id重复的报错，判断是Streamlit版本新了一点加了检查，为了省去改代码的麻烦手动降级一下：
pip install streamlit==1.26.0

之后做到Efficiency(Task3那些)要用CUDA，我本地机CUDA==12.6，所以参考了pytorch官网的指令在环境里装gpu的pytorch：
pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126
</code></pre>
<h2 id="fundamentals">Fundamentals</h2>
<p>Fundamentals：torch的算子<code>Operator</code>，模块<code>Module</code>等。<br>
（负责利用Python的math库，开发一些诸如sigmoid, add, mul之类的函数）</p>
<h3 id="实现细节">实现细节</h3>
<p>注意true置为1.0，false置为0.0。</p>
<blockquote>
<p>modern python语法: <code>Callable[[inputs], output]</code><br>
所有输入参数传为第一个列表参数 <code>[type]</code> ，输出为 <code>type</code> ，表示一个以<code>[type]</code>为输入参数、<code>type</code>为返回值的函数</p>
</blockquote>
<pre><code class="language-python">def map(fn: Callable[[float], float]) 
-&gt; Callable[[Iterable[float]], Iterable[float]]:
</code></pre>
<p>解读为：<br>
传入一个函数参数<code>fn</code>，输出一个函数。<br>
<code>fn</code>的性质是输入一个<code>float</code>，输出<code>float</code>。<br>
输出函数的性质是输入一个<code>Iterable[float]</code>即<code>float</code>的列表，输出<code>Iterable[float]</code>。</p>
<p>多用<code>assert_close</code>而非<code>==</code>。</p>
<h3 id="结果">结果</h3>
<p>最终成功跑通：<br>
<img src="https://meredith2328.github.io/post-images/20250702170517.png" alt="" loading="lazy"><br>
看起来streamlit是一个类似于tensorflow playground的可视化模块。</p>
<p>跑通task0_1到task0_4：<br>
<img src="https://meredith2328.github.io/post-images/20250702171057.png" alt="" loading="lazy"><br>
<img src="https://meredith2328.github.io/post-images/20250702171143.png" alt="" loading="lazy"></p>
<blockquote>
<p>ps. 这里有一个实现细节：<br>
operators.py里的函数不能相互依赖，比如sigmoid不能用同模块下的exp，但是可以用math.exp等，这是为了Efficiency一章numba能够识别相关函数。</p>
</blockquote>
<h2 id="ml-primer">ML Primer</h2>
<p>ML Primer：讲了一点机器学习基础，以二分类为例，无代码作业。</p>
<p>文中对ReLU的理解例子十分有趣，看一看：</p>
<blockquote>
<p>Neural networks are compound model classes that divide classification into two or more <strong>stages</strong>. Each stage uses a linear model to seperate the data. And then an <em>activation</em> function to reshape it.</p>
<p>We would like <strong>only</strong> points in the green or yellow sections to be classified as X's.<br>
To do this, we employ an activation function that <strong>filters</strong> out only these points. This function is known as a <strong>ReLU</strong> function, which is a fancy way of saying &quot;threshold&quot;.</p>
</blockquote>
<p><img src="https://meredith2328.github.io/post-images/20250702173828.png" alt="" loading="lazy"><br>
<img src="https://meredith2328.github.io/post-images/20250702173835.png" alt="" loading="lazy"><br>
只考虑其中一个分类边界，wx+b之后进行ReLU，只保留了黄色部分的z值、而负半轴的z值置为0（ReLU正半轴，对应前述黄色部分），<br>
相当于对所有初始数据进行的一种变换h1得到了下述的h1值，可以把它们画到黄色轴上。<br>
<img src="https://meredith2328.github.io/post-images/20250702175034.png" alt="" loading="lazy"><br>
<img src="https://meredith2328.github.io/post-images/20250702174044.png" alt="" loading="lazy"></p>
<p>同理我们也可以对所有初始数据进行另一个变换得到h2，我们可以把它们画到上述绿色轴上。<br>
<img src="https://meredith2328.github.io/post-images/20250702175242.png" alt="" loading="lazy"></p>
<p>有点像是把它们降维到轴上之后就很容易划分出两个轴上的边界点，从而得到边界线，即将两个不同的变换值整合在一块的一个线性变换：<br>
<img src="https://meredith2328.github.io/post-images/20250702175305.png" alt="" loading="lazy"><br>
<img src="https://meredith2328.github.io/post-images/20250702174044.png" alt="" loading="lazy"></p>
<p>再升维回去，直接考虑整个图像的效果就得到了一个非线性的分类边界：<br>
<img src="https://meredith2328.github.io/post-images/20250702174129.png" alt="" loading="lazy"></p>
<blockquote>
<p>Mathematically we can think of the transformed data as values h1,h2 which we get from applying separators with different parameters to the original data.<br>
The final prediction then applies a separator to h1,h2.<br>
<img src="https://meredith2328.github.io/post-images/20250702174343.png" alt="" loading="lazy"></p>
</blockquote>
<h2 id="autodiff">AutoDiff</h2>
<p>Autodiff：标量<code>scalar</code>，自动求导，包括反向传播<br>
（这时候已经能拿来跑模型训练了，但是因为没有并行所以效率很低）</p>
<h3 id="autodiff-2">AutoDiff</h3>
<blockquote>
<p>modern python语法：<strong>打包与解包</strong></p>
<p>打包：函数内使用参数<br>
<code>def central_difference(f: Any, *vals: Any, arg: int = 0, epsilon: float = 1e-6) -&gt; Any:</code><br>
（这里会把中间的参数全部打包成一整个元组vals）</p>
<p>解包：函数外传入参数<br>
<code>return (f(*valsAdd) - f(*valsSub)) / (2 * epsilon)</code><br>
（这里需要在元组前加入解包的*符号才能传入n个参数）</p>
</blockquote>
<p>注意使用中心差分，所以是 <code>(f(x + h) - f(x - h)) / 2h</code> 而不是我们习惯的单<code>h</code>求导方式<br>
查完wiki发现这一页有写知识点hhhhhh</p>
<h3 id="scalar">Scalar</h3>
<blockquote>
<p>Autodifferentiation works by <strong>collecting information about the computation path</strong> used within the function, and then transforming this information into a procedure for computing derivatives. Unlike the black-box method, autodifferentiation will allow us to use this information to compute each step more precisely.</p>
</blockquote>
<p>需要实现<strong>跟踪计算</strong>。</p>
<p>所以这里的思想同样是通过每一步多记录信息、为我们整体的更优思路提供方便。<br>
包括将数值和计算函数进行包装。<br>
要达成的效果：</p>
<pre><code>x1 = minitorch.Scalar(10)
x2 = minitorch.Scalar(30)
y = x1 + x2
y.history
</code></pre>
<pre><code>ScalarHistory(last_fn=&lt;class 'minitorch.scalar_functions.Add'&gt;, ctx=Context(no_grad=False, saved_values=()), inputs=[Scalar(10.000000), Scalar(30.000000)])
</code></pre>
<p>所以这就是所谓的forward函数的作用吗。<br>
apply除了forward中的实际操作，还记录了各种操作，便于利用。</p>
<blockquote>
<p>modern python语法：<strong>类方法</strong></p>
</blockquote>
<p>在 Python 中，<em>cls</em> 是类方法的第一个参数，用于表示类本身。<br>
它类似于实例方法中的 <em>self</em>，但 <em>self</em> 代表的是类的实例对象，而 <em>cls</em> 代表的是类对象。</p>
<ul>
<li>类方法：使用 <em>@classmethod</em> 装饰器定义，第一个参数必须是 <em>cls</em>，用于访问类变量和其他类方法。</li>
<li>静态方法：使用 <em>@staticmethod</em> 装饰器定义，不需要 <em>self</em> 或 <em>cls</em> 参数，不能访问类变量。</li>
</ul>
<pre><code class="language-python">class MyClass:
	class_variable = &quot;I am a class variable&quot;
	
	@staticmethod
	def static_method():
		print(&quot;I am a static method&quot;)
	
	@classmethod
	def class_method(cls):
		print(cls.class_variable)
</code></pre>
<p>之后理一下ScalarFunction的结构：<br>
这里使用了静态类和cls上下文来组织代码。<br>
cls是具体的类，所有类都需要在调用自身实现的forward的同时，进行统一输入类型、和创建context等操作，所以将这些统一的操作写到静态的ScalarFunction里。<br>
这样的好处是，<strong>每个具体类都只需要关心具体的function实现</strong>，而无须考虑接口处理问题。</p>
<blockquote>
<p>软件工程知识：<strong>工厂方法</strong></p>
</blockquote>
<p>定义一个工厂类（<code>ScalarFunction</code>），它可以根据参数的不同返回不同类的实例（apply类方法），被创建的实例通常都具有共同的父类（Scalar），这正是<em>简单工厂模式</em>。<br>
（重复一遍，简单工厂模式根据不同传入参数创建不同实例。）<br>
而将实例创建的具体逻辑不统一在工厂类、而是交予专门的工厂子类完成（如Add等），这正是更进一步的<strong>工厂方法模式</strong>。工厂类只要简单地调用工厂子类变量<code>cls</code>即可。</p>
<pre><code class="language-python">class ScalarFunction:

    @classmethod
    def _backward(cls, ctx: Context, d_out: float) -&gt; Tuple[float, ...]:
        return wrap_tuple(cls.backward(ctx, d_out))  # type: ignore

    @classmethod
    def _forward(cls, ctx: Context, *inps: float) -&gt; float:
	    # _forward和_backward一个解包一个装包, 规整一点, 具体逻辑留给具体类
        return cls.forward(ctx, *inps)  # type: ignore

    @classmethod
    def apply(cls, *vals: &quot;ScalarLike&quot;) -&gt; Scalar:
	    ...
	    # 感觉这里也可以直接调用cls.forward呢，
	    # 或许是为了代码规整，一个_forward一个_backward都写在静态类里
	    # 这样的话forward只用写具体逻辑了
        c = cls._forward(ctx, *raw_vals)
</code></pre>
<p>debug:</p>
<pre><code class="language-python">        c = cls._forward(ctx, *raw_vals)
&gt;       assert isinstance(c, float), &quot;Expected return type float got %s&quot; % (type(c))
E       AssertionError: Expected return type float got &lt;class 'int'&gt;
E       Falsifying example: test_one_args(
E           fn=('exp', exp, exp),
E           t1=Scalar(0.000000),  # or any other generated value
E       )

minitorch\scalar_functions.py:64: AssertionError
</code></pre>
<p>思考：为什么c是int，为什么_forward返回了一个int。追踪！<br>
通过给Neg加print打印类型检错，发现传入int之后加neg还是int。<br>
在operator里加了个强制转换，解决了问题。</p>
<pre><code class="language-python">def forward(ctx: Context, a: float) -&gt; float:
	# print('type of a here is ', type(a))
	# print('type of neg(a) here is ', type(operators.neg(a)))
	return operators.neg(a) # 这里需要强制加个转换, 好奇怪
</code></pre>
<pre><code>type of a here is  &lt;class 'int'&gt;
type of neg(a) here is  &lt;class 'int'&gt;
</code></pre>
<pre><code class="language-python">def neg(x: float) -&gt; float:
    &quot;$f(x) = -x$&quot;
    return -float(x)
</code></pre>
<h3 id="chain-rule">Chain Rule</h3>
<p>将每个函数理解成一个黑箱操作，输入了上一个黑箱的结果，函数调用层层<strong>嵌套</strong>，<br>
每次求导就是逆黑箱的过程，输入了上一次逆黑箱的结果，求导结果依次<strong>相乘</strong>。</p>
<p>每次backward就是每个逆黑箱求导的具体过程，即求导并乘d_output。<br>
例如forward是log(a)，一个输入变量a，<br>
那么backward输出也只有结果对a求导得到的一个值再乘d_output，即d_output / a。<br>
再例如forward是a+b，两个输入变量a和b，<br>
那么backward输出是结果对两个变量分别求偏导得到的两个值、每个值乘d_output，即d_output和d_output。</p>
<pre><code class="language-python">class Log(ScalarFunction):
    &quot;Log function $f(x) = log(x)$&quot;

    @staticmethod
    def forward(ctx: Context, a: float) -&gt; float:
        '''保存a, 计算log(a)并返回'''
        ctx.save_for_backward(a)
        return operators.log(a)

    @staticmethod
    def backward(ctx: Context, d_output: float) -&gt; float:
        '''取出保存的a, 根据传回的d_output, 计算d_output/a并返回, 即d_output f\'(x)'''
        (a,) = ctx.saved_values
        return operators.log_back(a, d_output)
</code></pre>
<p>那么chain rule就是将层层嵌套得到的最终函数一步步逆黑箱，得到计算结果。<br>
为了编写chain rule，我们需要每个黑箱的信息。看看history是怎么记录的。<br>
ps. last_fn其实是当前要计算处理的function的意思，至于为什么叫last后面就知道了</p>
<pre><code class="language-python">    last_fn: Optional[Type[ScalarFunction]] = None
    ctx: Optional[Context] = None
    inputs: Sequence[Scalar] = ()
</code></pre>
<p>scalar实例是由一系列scalarFunction操作得到的。<br>
在scalarFunction这个黑盒进行apply时将history以以下形式组织：</p>
<pre><code class="language-python"># Create a new variable from the result with a new history.
back = minitorch.scalar.ScalarHistory(cls, ctx, scalars)
return minitorch.scalar.Scalar(c, back)
</code></pre>
<p>即back存储了当前黑盒的cls、ctx和输入值scalars。这足以逆黑盒计算导数。<br>
cls: 当前黑盒是什么scalarFunction<br>
scalars: 当前黑盒的全部输入变量<br>
ctx: forward时记录的变量，现在直接传进去用就行，后面应该会提到</p>
<p>回到scalar定义的chain_rule接口及相关要求。</p>
<pre><code class="language-python">def chain_rule(self, d_output: Any) -&gt; Iterable[Tuple[Variable, Any]]:
</code></pre>
<blockquote>
<p>Implement the chain_rule function in Scalar for functions of arbitrary arguments. This function should be able to backward process a function by passing it in a context and (d) and then <strong>collecting the local derivatives</strong>. It should then <strong>pair these with the right variables</strong> and return them. This function is also where we filter out constants that were used on the forward pass, but do not need derivatives.</p>
</blockquote>
<p>d_output我们知道是backward里面用到要乘的数值，我们要计算的是 d_output * f'(x)。<br>
仍然以一个简单的例子为例：<br>
假设输入值为<code>2.0</code>, 经过一个<code>log</code>，得到了<code>log(2.0)</code>。设<code>d_output = 1</code><br>
那么我们当前一步的求导一定是：<code>1 * log'(2.0)</code><br>
即执行了：</p>
<ol>
<li>collecting the local derivatives，即对last_fn进行backward得到全部偏导组成的tuple。</li>
<li>pair these with the right variables，即再进行一个zip操作。</li>
</ol>
<p>根据测试里的顺序可以看到每个pair的variable在前面、derivative在后面。</p>
<h3 id="backpropagate">Backpropagate</h3>
<blockquote>
<p>The key implementation challenge of backpropagation is to make sure that we process each node in the correct order, i.e. we have first processed every node that uses a Variable before that varible itself.</p>
</blockquote>
<p><a href="https://minitorch.github.io/module1/backpropagate/#running-example">Backpropagate - MiniTorch</a></p>
<p>这一段看起来难理解一点，那就慢慢读，步步为营，小步快跑<br>
<img src="https://meredith2328.github.io/post-images/20250707212822.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://meredith2328.github.io/post-images/20250707213331.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>第一层<br>
首先是最后一个黑盒 <s>橘盒</s> 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 输出的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(a, b)=a + b, a = log(z), b = exp(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span><br>
<strong>每次反黑盒都是黑盒的输出变量通过黑盒的函数形式对输入变量逐个求偏导的过程。</strong><br>
进行第一个反黑盒backward计算，得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>对两个输入变量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a, b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>各自的偏导数。</p>
</li>
<li>
<p>第二层<br>
接下来假设先对上面那个节点进行处理，a自顾自地对z反黑盒（先拿到了偏导数用来乘，再让a对z求导，把用来乘的值和求导值乘起来）<br>
<img src="https://meredith2328.github.io/post-images/20250707213447.png" alt="" loading="lazy"></p>
</li>
</ul>
<p>再对下面黑盒处理，b对z反黑盒<br>
<img src="https://meredith2328.github.io/post-images/20250707213747.png" alt="" loading="lazy"></p>
<p>根据链式法则，为了将这一步两个反黑盒与前一步反黑盒结合起来、得到h对z的导数，除了前述“拿到偏导数用来<strong>乘</strong>”的步骤，还要把这一步两个反黑盒得到的值<strong>加</strong>起来。<br>
（某一层有多个对相同变量的反黑盒，得到的导数要加起来）</p>
<ul>
<li>第三层<br>
最后一层反黑盒。拿汇合的导数值作为乘数，乘以z分别对x和y的偏导，就得到了结果： <code>x.derivative</code>和<code>y.derivative</code>，即<strong>h对x和y的偏导</strong>。<br>
<img src="https://meredith2328.github.io/post-images/20250707214230.png" alt="" loading="lazy"><br>
有趣的是，在以上的过程中，每个变量及中间变量（如h、a、b、x、y）都有保存的导数。<br>
第一层反黑盒传入的导数是h对h，输出了<strong>h对a</strong>和<strong>h对b</strong>；<br>
第二层反黑盒传入的导数是h对a和h对b，先计算了a对z和b对z，再输出了<strong>h对z</strong>；<br>
第三层反黑盒传入的导数是h对z，先计算了z对x和z对y，再输出了h对x和h对y。<br>
上述加粗的存储入以被求导变量为键的字典用于后续计算使用，而最后的变量（leaf variable, x和y）被存储（如 <code>x.derivative, y.derivative</code>）。</li>
</ul>
<blockquote>
<p>Backpropagate Algorithm：反向传播算法</p>
</blockquote>
<ol start="0">
<li>Call topological sort to get an ordered queue</li>
<li>Create a dictionary of Scalars and current derivatives</li>
<li>For each node in backward order, pull a completed Scalar and derivative from the queue:</li>
</ol>
<ul>
<li>a. if the Scalar is a leaf, add its final derivative (<code>accumulate_derivative</code>) and loop to (1)</li>
<li>b. if the Scalar is not a leaf,
<ul>
<li>a. call <code>.chain_rule</code> on the last function with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">d_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>b. loop through all the Scalars+derivative produced by the chain rule</li>
<li>c. accumulate derivatives for the Scalar in a dictionary</li>
</ul>
</li>
</ul>
<p>之后实现了拓扑排序、实现了反向传播，再实现算子的backward，就搞定了这一段。<br>
其中实现算子的backward时，需要什么变量，forward就存过来什么变量。（也可以为了节省计算而存入一些计算好的值，我这里直接传变量再算一遍了）<br>
完结撒花。</p>
<figure data-type="image" tabindex="3"><img src="https://meredith2328.github.io/post-images/20250707232057.png" alt="" loading="lazy"></figure>
<h2 id="tensors">Tensors</h2>
<p>Tensor：把标量<code>scalar</code>换成张量<code>Tensor</code>，与Pytorch使用的数据结构保持一致</p>
<h3 id="tensor_data">tensor_data</h3>
<p>实现了tensor的索引部分，参考Pytorch的API确定相关功能。为了保证输出正确，相关命令结果均通过Pytorch运行后复制得到。</p>
<p>stride是在Tensor指定维度中从一个元素跳到下一个元素的步长，而shape是Tensor的形状。<br>
也就是说stride是可以从shape推断得到的。<br>
感觉stride是一个非常有用的思考方式，从多维到一维映射。一开始没看知识讲解，看了之后感觉醍醐灌顶。</p>
<blockquote>
<ul>
<li><strong>Strides</strong> is a tuple that provides the mapping from user indexing to the position in the 1-D <code>storage</code>.</li>
<li><code>contiguous</code> mapping, is in the natural counting order (<strong>bigger strides left</strong>).</li>
</ul>
</blockquote>
<pre><code class="language-python">&gt;&gt;&gt; a = torch.arange(6)
&gt;&gt;&gt; b = a.view(2, 3)
&gt;&gt;&gt; b
tensor([[0, 1, 2],
        [3, 4, 5]])
&gt;&gt;&gt; b.stride()
(3, 1)
&gt;&gt;&gt; b.shape
torch.Size([2, 3])
</code></pre>
<p>index方法：把元组形式的index转换为下标。<br>
indices方法：产生n多个元组形式index的iterable，其中n是内部存储的数量。</p>
<pre><code class="language-python">    def indices(self) -&gt; Iterable[UserIndex]:
        lshape: Shape = array(self.shape)
        out_index: Index = array(self.shape)
        for i in range(self.size):
            to_index(i, lshape, out_index)
            yield tuple(out_index)
</code></pre>
<p>把数字按照形状排列如果没有思路不妨找找规律。正如我们在CS61A中反复采用的方法，对应于某个初始值处理得到某一位，然后通过改变初始值再相同处理得到下一位，如是迭代。</p>
<pre><code class="language-python"># 0-&gt;(0,0) 5-&gt;(1,0) 10-&gt;(2,0) 14-&gt;(2,4), 当 shape=(3,5)
# 0-&gt;(0,0,0) 3-&gt;(0,0,3) 4-&gt;(0,1,0) 12-&gt;(1,0,0) 当shape=(2,3,4)
# out_index[-1] = ordinal % shape[-1]  
# out_index[-2] = ordinal // shape[-1] % shape[-2]
# out_index[-3] = ordinal // shape[-1] // shape[-2] % shape[-3]
for i in range(len(shape) - 1, -1, -1): # 倒序
	out_index[i] = ordinal % shape[i]
	ordinal = ordinal // shape[i]
</code></pre>
<p>不妨读读从shape到stride转换的代码以加深理解：</p>
<pre><code class="language-python">def strides_from_shape(shape: UserShape) -&gt; UserStrides:
    layout = [1]
    offset = 1
    for s in reversed(shape):
        layout.append(s * offset)
        offset = s * offset
    return tuple(reversed(layout[:-1]))
</code></pre>
<p>eg. (5, 2) -&gt; (2, 1)<br>
思考：<br>
strides的最右侧维度，当前步长一定为1（offset的当前值为1），故layout初始化为<code>[1]</code><br>
strides的右数第二维，当前步长乘了shape最右侧维度，<br>
右数第三维再乘了shape右数第二维维度，以此类推，<br>
strides的最左维一定是乘了shape的左数第二维得到的。</p>
<p>permute方法用于重新排列维度：</p>
<pre><code class="language-python">import torch
x = torch.randn(2, 3, 5)
x_permuted = x.permute(2, 0, 1) # 使用permute函数重新排列维度
print(x_permuted.size()) # 输出: torch.Size([5, 2, 3])
</code></pre>
<p>这个很适合用列表推导式来写。因为列表推导式天然地可以根据某个顺序来重新排列列表。<br>
例如将a按照order顺序排列，就是<code>[a[i] for i in order]</code>。</p>
<pre><code class="language-python">return TensorData(self._storage, tuple([self.shape[i] for i in order]), tuple([self.strides[i] for i in order]))
</code></pre>
<h3 id="broadcasting">broadcasting</h3>
<p><strong>Rule 1</strong>: Any dimension of size 1 can be zipped with dimensions of size n &gt; 1 by assuming the dimension is copied n times.<br>
eg.<br>
(3,) + (1,) = (3,)<br>
(5, 1) + (5, 3) = (5, 3)</p>
<p><strong>Rule 2</strong>: Extra dimensions of shape 1 can be added to a tensor to ensure the same number of dimensions with another tensor.<br>
<strong>Rule 3</strong>: Any extra dimension of size 1 can only be implicitly added <strong>on the left side</strong> of the shape.<br>
eg.<br>
(3,) + (5, 3) = (1, 3) + (5, 3) = (5, 3)<br>
(2, 3, 1) + (7, 2, 1, 5) = (1, 2, 3, 1) + (7, 2, 1, 5) = (7, 2, 3, 5)</p>
<figure data-type="image" tabindex="4"><img src="https://meredith2328.github.io/post-images/20250713170442.png" alt="" loading="lazy"></figure>
<h3 id="autograd">Autograd</h3>
<p>先看autograd的API效果：</p>
<pre><code class="language-python">&gt;&gt;&gt; import torch
&gt;&gt;&gt; tensor1 = torch.tensor([1.0, 2.0, 3.0], requires_grad=True)
&gt;&gt;&gt; out = tensor1.sum()
&gt;&gt;&gt; out.backward()
&gt;&gt;&gt; print(tensor1.grad)
tensor([1., 1., 1.])
&gt;&gt;&gt;
</code></pre>
<p>原因：执行了一个sum函数（当然梯度是不因tensor初始值发生变化的，只取决于执行的函数）</p>
<pre><code>out = sum([x1, x2, x3]) = x1 + x2 + x3
所以out对x的梯度是[1., 1., 1.]
</code></pre>
<p>再比如说执行乘和求和两个函数，函数梯度再发生变化：</p>
<pre><code class="language-python">&gt;&gt;&gt; tensor1 = torch.tensor([1.0, 2.0, 3.0], requires_grad=True)
&gt;&gt;&gt; out = (tensor1 * 2).sum()
&gt;&gt;&gt; out.backward()
&gt;&gt;&gt; print(tensor1.grad)
tensor([2., 2., 2.])
</code></pre>
<blockquote>
<p>It turns out that you can do most of machine learning without ever thinking in higher dimensions.</p>
</blockquote>
<p>这里别的都好说，硬算就行，<br>
permute函数的backward需要通过实验额外说明一下：</p>
<pre><code class="language-python">&gt;&gt;&gt; x = torch.randn(2, 3, 4, requires_grad = True)
&gt;&gt;&gt; y = x.permute(2, 0, 1)
&gt;&gt;&gt; y.shape
torch.Size([4, 2, 3])
&gt;&gt;&gt; loss = y.sum()
&gt;&gt;&gt; loss.backward()
&gt;&gt;&gt; x.grad.shape
torch.Size([2, 3, 4])
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; x = torch.randn(2, 3, 4, requires_grad = True)
&gt;&gt;&gt; loss = x.sum()
&gt;&gt;&gt; loss.backward()
&gt;&gt;&gt; x.grad.shape
torch.Size([2, 3, 4])
</code></pre>
<p>x先执行了permute，再执行了sum，之后执行backward。<br>
从两个实验可以看出，无论是否执行permute，对完整过程执行backward得到的是一样的。这说明permute的backward事实上是一个逆向permute的过程，将gradient与输入张量对齐。<br>
由此可以得到以下的实现：</p>
<pre><code class="language-python">    @staticmethod
    def backward(ctx: Context, grad_output: Tensor) -&gt; Tuple[Tensor, float]:
		# 第一个是把grad_output按照a的shape和strides重排, 第二个是order的梯度为0.0
        (a,) = ctx.saved_values
        return Tensor.make(grad_output._tensor._storage, a.shape, a.strides, grad_output.backend), 0.0
</code></pre>
<p>之后2.4和2.5逐渐遇到一些神奇的bug，不知道是框架代码写错了还是我写错了。反正修改掉其中一者最后能跑就行。</p>
<h2 id="efficiency">Efficiency</h2>
<p>Efficiency：使用<code>numba</code>并行和CUDA编程等方式提升效率。<br>
Networks：已经开发出一个很简单的pytorch了，来拿它搞个卷积神经网络进行图像分类这种上游任务吧！</p>
<p>参考了：</p>
<ol>
<li><a href="https://minitorch.github.io/">Minitorch项目文档</a></li>
<li>numba的文档相关部分（<a href="https://numba.readthedocs.io/en/stable/user/parallel.html">Automatic parallelization with @jit</a>）</li>
<li>https://github.com/mukobi/Minitorch-Self-Study-Guide-SAIA</li>
</ol>
<h3 id="parallelization">parallelization</h3>
<p>Numba教程属于是。<br>
比较：</p>
<pre><code class="language-python">def map(fn):
    # Change 1: Move function from Python to JIT version.
    fn = njit()(fn)

    def _map(out, input):
        for i in range(len(out)):
            out[i] = fn(input[i])

    # Change 2: Internal _map must be JIT version as well.
    return njit()(_map)
</code></pre>
<pre><code class="language-python">def map(fn): 
	fn = njit()(fn) 
	
	def _map(out, input): 
		# Change 3: Run the loop in parallel (prange) 
		for i in prange(len(out)): 
			out[i] = fn(input[i]) 
			
	return njit(parallel=True)(_map)
</code></pre>
<p>三个优化目标：</p>
<ul>
<li>Main loop in parallel （用 <code>numba.prange</code> 替代 <code>range</code>）</li>
<li>All indices use numpy buffers （所有索引计算都使用ndarray，而非list或tuple）</li>
<li>When <code>out</code> and <code>in</code> are stride-aligned, avoid indexing（跳过索引计算，直接线性遍历）<br>
ps. 搞不懂reduce的不要调用函数是啥意思。查阅了其他github fork的实现，都调用了函数。</li>
</ul>
<p>这里有个搞笑的事情：在tensor_data/to_index函数的实现中，要加个trick：<br>
把ordinal改成cur_pos，为了不是改变同一变量，加个0。</p>
<pre><code>cur_pos = ordinal + 0 # 为了Module3并行, 不能修改循环变量的trick
for i in range(len(shape) - 1, -1, -1): # 倒序
	out_index[i] = cur_pos % shape[i]
	cur_pos = cur_pos // shape[i]
</code></pre>
<p>之后parallel_check三个函数都得到以下结果了：</p>
<pre><code>------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
</code></pre>
<p>写这个task踩的一些坑：</p>
<ol>
<li>把parallel=True关掉再看看。控制变量，从而确定是并行的问题、还是改函数的时候把函数逻辑改错了。</li>
<li>一点一点改。先跟原来的实现保持完全一致，然后慢慢加prange和快速路径等等，小步快跑，这样出错了可以发现问题在哪里。一口气全加上去了，报错还是得一点一点改。</li>
<li>到了并行，似乎很多时候调试器也不完全能解决问题。就像我拿pdb调到那里、自己调用相关函数跑发现addConstant确实把<code>[[0.00], [0.00]]</code>加成<code>[[5.00], [5.00]]</code>了，明明跑的跟代码一模一样的函数，结果它并行起来就变成<code>[0.00, 5.00]</code>了。这是什么事嘛。</li>
</ol>
<p>之后先把另外两个的parallel给关了，专心调map的问题。</p>
<h4 id="cannot-determine-numba-type">Cannot determine Numba type</h4>
<p>这里报了一个神奇的错误 <code>Untyped global name 'exp': Cannot determine Numba type of &lt;class 'function'&gt;</code>，需要回去改operators.py：<br>
我在sigmoid实现中用到了同模块的exp函数，这是不被numba识别的，将其修改为math.exp或np.exp即可。<br>
同理，在operators.py中的每个函数都不能互相依赖，而只能引用math或np库。</p>
<p>一开始：</p>
<pre><code class="language-python">def sigmoid(x: float) -&gt; float:
    if x &gt;= 0:
        return 1.0 / (1.0 + exp(-x))
    else:
        return exp(x) / (1.0 + exp(x))
</code></pre>
<p>修改后：</p>
<pre><code class="language-python">def sigmoid(x: float) -&gt; float:
    if x &gt;= 0:
        return 1.0 / (1.0 + math.exp(-x))
    else:
        return math.exp(x) / (1.0 + math.exp(x))
</code></pre>
<p>修改完保险起见把之前的测试用例再跑了一遍，没什么问题。<br>
开着parallel=False先改完这个bug、task3.1可以全部通过。再把parallel=True打开跑跑看。<br>
发现直接改prange解决不了问题。去读读numba的文档（<a href="https://numba.readthedocs.io/en/stable/user/parallel.html">Automatic parallelization with @jit</a>）。</p>
<h4 id="race">race</h4>
<p>里面讲了一个race的案例。先拿串行测试一下正常情况：</p>
<pre><code class="language-python">&gt;&gt;&gt; x = np.ones(4)
&gt;&gt;&gt; n = x.shape[0]
&gt;&gt;&gt; n
4
&gt;&gt;&gt; y = np.zeros(4)
&gt;&gt;&gt; for i in range(n):
...     y[:] += x[i]
...
&gt;&gt;&gt; y
array([4., 4., 4., 4.])
</code></pre>
<p>如果写得不对，结果会如下：</p>
<pre><code class="language-python">&gt;&gt;&gt; from numba import njit, prange
&gt;&gt;&gt; @njit(parallel=True)
... def prange_wrong_result(x):
...     n = x.shape[0]
...     y = np.zeros(4)          # y = [0, 0, 0, 0]
...     for i in prange(n):      # 并行循环，i 同时跑
...         y[:] += x[i]         # 每个线程都在改 y 的全部元素
...     return y
...

&gt;&gt;&gt; prange_wrong_result(x)
array([4., 4., 4., 4.])
&gt;&gt;&gt; prange_wrong_result(x)
array([3., 3., 4., 4.])
&gt;&gt;&gt; prange_wrong_result(x)
array([4., 4., 4., 4.])
&gt;&gt;&gt; prange_wrong_result(x)
array([3., 2., 2., 2.])
&gt;&gt;&gt; prange_wrong_result(x)
array([2., 2., 2., 2.])
</code></pre>
<p>我们可以查一下，发现numba会自动根据CPU核数把循环拆成多个线程来跑：</p>
<pre><code class="language-python">&gt;&gt;&gt; from numba import config
&gt;&gt;&gt; print(&quot;Numba 并行线程数：&quot;, config.NUMBA_NUM_THREADS)    
Numba 并行线程数： 16
</code></pre>
<p>所以上述循环会拆成以下的效果，造成同时读写的冲突：</p>
<pre><code>- 线程 A：执行 `y[:] += 1`
- 线程 B：执行 `y[:] += 1`
- 线程 C：执行 `y[:] += 1`
- 线程 D：执行 `y[:] += 1`
</code></pre>
<p>但如果通过 <code>y += x[i]</code> 等 Numba 能识别的 “规约操作”（reduction），Numba 会自动把 <code>y += x[i]</code> 转换成线程安全的加法，不会多个线程同时写同一个位置，不会race。</p>
<blockquote>
<p>A reduction is inferred automatically if a variable is updated by a supported binary function/operator using its previous value in the loop body. The following functions/operators are supported: <code>+=</code>, <code>+</code>, <code>-=</code>, <code>-</code>, <code>*=</code>, <code>*</code>, <code>/=</code>, <code>/</code>, <code>max()</code>, <code>min()</code>. The initial value of the reduction is inferred automatically for the supported operators (i.e., not the <code>max</code> and <code>min</code> functions). Note that the <code>//=</code> operator is not supported because in the general case the result depends on the order in which the divisors are applied. However, if all divisors are integers then the programmer may be able to rewrite the <code>//=</code> reduction as a <code>*=</code> reduction followed by a single floor division after the parallel region where the divisor is the accumulated product. For the <code>max</code> and <code>min</code> functions, the reduction variable should hold the identity value right before entering the <code>prange</code> loop. Reductions in this manner are supported for scalars and for arrays of arbitrary dimensions. （numba文档）</p>
</blockquote>
<p>因此排除发现，是我把out_index和in_index的初始化拿出循环的锅，出现race了。<br>
修改后如下：</p>
<pre><code class="language-python">def tensor_map(
    fn: Callable[[float], float]
) -&gt; Callable[[Storage, Shape, Strides, Storage, Shape, Strides], None]:
    def _map(
        out: Storage,
        out_shape: Shape,
        out_strides: Strides,
        in_storage: Storage,
        in_shape: Shape,
        in_strides: Strides,
    ) -&gt; None:
        # 3. stride-aligned, 快速路径
        if (
            len(out_shape) == len(in_shape) and
            (out_shape == in_shape).all() and
            (out_strides == in_strides).all()
        ):
            for i in prange(len(out)): # 1. parallel
                out[i] = fn(in_storage[i])
        else:
            # 2. ndarray
            for out_i in prange(len(out)): # 1. parallel
                # 不要把out_index和in_index拿出循环, 不然会race
                out_index = np.empty(len(out_shape), dtype=np.int32)
                in_index = np.empty(len(in_shape), dtype=np.int32)
                to_index(out_i, out_shape, out_index)
                broadcast_index(out_index, out_shape, in_shape, in_index)
                out_pos = index_to_position(out_index, out_strides)
                in_pos = index_to_position(in_index, in_strides)
                out[out_pos] = fn(in_storage[in_pos])

    return njit(parallel=True)(_map)  # type: ignore
</code></pre>
<p>如法炮制、修改zip和reduce，成功通过task3.1。</p>
<h3 id="matrix-multiplication">Matrix Multiplication</h3>
<p>根据矩阵微积分的性质有：<br>
<img src="https://meredith2328.github.io/post-images/20250717195114.png" alt="" loading="lazy"><br>
优化要求：</p>
<ul>
<li>Outer loop in parallel</li>
<li>No index buffers or function calls</li>
<li>Inner loop should have no global writes, 1 multiply.</li>
</ul>
<p>outer loop很好理解，就是遍历结果矩阵index的那个loop，这个肯定是prange就搞定了的。<br>
第二行还是没听懂，为了思考方便还是直接调用之前实现的to_index之类的函数了。<br>
第三个是理所应当的，按照numba优化的写法把reduction变量写在外面、里面+=。</p>
<h3 id="关于numbacuda">关于numba.cuda</h3>
<p>之后看了一眼 <code>projects/run_fast_tensor.py</code> ，发现我用pip安装的<code>numba==0.60.0</code>没有<code>numba.cuda</code>，于是<code>pip uninstall</code>了一下，又用<code>conda</code>安装了<code>numba</code>和<code>cudatoolkit</code>。</p>
<pre><code>pip uninstall numba
conda install numba==0.60.0 cudatoolkit -c conda-forge -y
</code></pre>
<p>然后拿以下指令查了一下：</p>
<pre><code>&gt;&gt;&gt; from numba import cuda
&gt;&gt;&gt; print(cuda.gpus)
&lt;Managed Device 0&gt;
</code></pre>
<p>感觉是minitorch的代码和我numba版本不匹配，把<code>numba.cuda.is_available()</code>改了一下：</p>
<pre><code class="language-python">from numba import cuda
if cuda.gpus:
    GPUBackend = minitorch.TensorBackend(minitorch.CudaOps)
</code></pre>
<h3 id="cuda-operations-and-matrix-multiplication">CUDA operations and Matrix Multiplication</h3>
<p>未进行学习，直接在代码中参考了github上可通过测试的开源实现。<br>
Task3.3: <a href="https://github.com/atgctg/minitorch">atgctg/minitorch: Solutions for http://minitorch.github.io</a><br>
Task3.4: <a href="https://github.com/feimos32/Minitorch-Learning-Introduction">feimos32/Minitorch-Learning-Introduction: （已完结）斯坦福大学机器学习项目MiniTorch解读——《MiniTorch 学习全攻略》 的随书源码。</a><br>
（推荐：<a href="https://dezeming.top/wp-content/uploads/2022/02/MiniTorch-%E5%AD%A6%E4%B9%A0%E5%85%A8%E6%94%BB%E7%95%A5.pdf">MiniTorch-学习全攻略.pdf</a>）</p>
<h2 id="附-基于pytorch代码讲讲反向传播和计算图">附: 基于Pytorch代码，讲讲反向传播和计算图</h2>
<p>以下代码选取自PyTorch官方的 <a href="https://docs.pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html">Quickstart — PyTorch Tutorials</a><br>
省略了<code>import</code>，数据集加载，设置<code>DataLoader</code>，建立模型，设置损失函数和优化器。</p>
<pre><code class="language-python">def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train() # 将模型设置为训练模式
    for batch, (X, y) in enumerate(dataloader):
        X, y = X.to(device), y.to(device)

        # Compute prediction error
        pred = model(X) # 模型前向传播, 得到预测值
        loss = loss_fn(pred, y) # 根据预测值和实际值, 得到loss

        # Backpropagation
        loss.backward() # !Autograd主要干了这个函数的事情!
        optimizer.step() # 优化一轮参数
        optimizer.zero_grad() # 将梯度清零

        if batch % 100 == 0:
            loss, current = loss.item(), (batch + 1) * len(X)
            print(f&quot;loss: {loss:&gt;7f}  [{current:&gt;5d}/{size:&gt;5d}]&quot;)
</code></pre>
<pre><code class="language-python">def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad(): # 为了加快推理, 所有前向操作都不计算梯度
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X) # 上面设置后, 这里面的每一步前向操作都不计算梯度
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f&quot;Test Error: \n Accuracy: {(100*correct):&gt;0.1f}%, Avg loss: {test_loss:&gt;8f} \n&quot;)
</code></pre>
<p>我们知道，在前向传播的同时也建立了计算图。用以下数值例子举例。<br>
ps. 数值例子由GPT生成，可能存在计算错误。</p>
<h3 id="单变量标量函数">单变量标量函数</h3>
<p>前向传播：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mo>(</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mo>)</mo><mn>2</mn></msup><mo separator="true">,</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L = (x + 2)^2, x = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>计算图：</p>
<pre><code>    x=1     2
     \     /
      + --&gt; a=3
        \
         \
          **2 --&gt; y=9 --&gt; L=9
</code></pre>
<p>由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo separator="true">,</mo><mi>L</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">a=x+2, y=a^2, L=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，依次用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo separator="true">,</mo><mi>a</mi><mo separator="true">,</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">y,a,x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span></span></span></span>的偏导数。</p>
<p>首先计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial y} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612159999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,<br>
再计算</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>=</mo><mn>1</mn><mo>×</mo><mn>6</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial a} = \frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial a} = 1 \times 6=6
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0574399999999997em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span></span></p>
<p>最后计算</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mn>6</mn><mo>×</mo><mn>1</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial x} = \frac{\partial L}{\partial a} \cdot \frac{\partial a}{\partial x} = 6 \times 1=6
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span></span></p>
<p>可见每一步的共同点：以计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 为例，<br>
都是把上一步的梯度计算结果（如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612159999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ）拿过来，乘以这一步计算出的梯度（如 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial y}{\partial a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ）。</p>
<p>我们可以把<strong>正向</strong>的过程看作正向的一个黑箱操作（即构造的计算图），<br>
<strong>由上一步传播过来的值进行了函数运算得到另一个值、传播的是函数值，</strong><br>
而<strong>反向</strong>的过程看作反向的一个黑箱操作（即计算图的逆向），<br>
<strong>由上一步传播过来的导数值乘以当前步的求导运算得到另一个导数值，传播的是导数值。</strong></p>
<h3 id="多变量标量函数">多变量标量函数</h3>
<p>前向传播：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mo>(</mo><mi>w</mi><mo>⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi><msup><mo>)</mo><mn>2</mn></msup><mo separator="true">,</mo><mi>w</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>x</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L=(w⋅x+b)^2,w=2,x=3,b=1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>计算图：</p>
<pre><code>  w=2   x=3       b=1
   \   /          |
    * --&gt; a=6     |
      \          /
       + --&gt; z=7
         \
          \
           **2 --&gt; L=49
</code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mo>×</mo><mn>7</mn><mo>=</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial z} = 2 \times 7 = 14
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>=</mo><mn>14</mn><mo>×</mo><mn>1</mn><mo>=</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial a} = \frac{\partial L}{\partial z} \cdot \frac{\partial z}{\partial a} = 14 \times 1 = 14
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>w</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>w</mi></mrow></mfrac><mo>=</mo><mn>14</mn><mo>×</mo><mn>3</mn><mo>=</mo><mn>42</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial w} = \frac{\partial L}{\partial a} \cdot \frac{\partial a}{\partial w} = 14 \times 3 = 42
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">2</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mn>14</mn><mo>×</mo><mn>2</mn><mo>=</mo><mn>28</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial x} = \frac{\partial L}{\partial a} \cdot \frac{\partial a}{\partial x} = 14 \times 2 = 28
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">8</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>b</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow></mfrac><mo>⋅</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>b</mi></mrow></mfrac><mo>=</mo><mn>14</mn><mo>×</mo><mn>1</mn><mo>=</mo><mn>14</mn></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial b} = \frac{\partial L}{\partial z} \cdot \frac{\partial z}{\partial b} = 14 \times 1 = 14
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">4</span></span></span></span></span></p>
<p>这里重点关注两个点：一是两个变量的加法，二是两个变量的乘法。<br>
将两个变量加在一起时（如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">z=a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>），对每个变量的偏导值均为1。所以要得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>对每个变量的偏导，只需<strong>把上一步传播过来的值乘以1即可</strong>。<br>
将两个变量乘在一起时（如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mi>w</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">a=wx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">x</span></span></span></span>），<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>求导得到的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的值，反之对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>求导得到的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>的值。所以要得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>对每个变量的偏导，只需<strong>把上一步传播过来的值乘以另一个变量即可</strong>。这一事实也会运用到后面的矩阵乘法上。</p>
<h3 id="矩阵乘法">矩阵乘法</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo separator="true">,</mo><mspace width="1em"/><mi>W</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X = \begin{bmatrix} 1 &amp; 2 \\ 3 &amp; 4 \end{bmatrix}, \quad
W = \begin{bmatrix} 1 &amp; 0 \\ 2 &amp; 1 \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p>前向传播：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>=</mo><mi>X</mi><mi mathvariant="normal">@</mi><mi>W</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>⋅</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>⋅</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>⋅</mo><mn>0</mn><mo>+</mo><mn>2</mn><mo>⋅</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo>⋅</mo><mn>1</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>2</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mo>⋅</mo><mn>0</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">h = X @ W = 
\begin{bmatrix}
1 \cdot 1 + 2 \cdot 2 &amp; 1 \cdot 0 + 2 \cdot 1 \\
3 \cdot 1 + 4 \cdot 2 &amp; 3 \cdot 0 + 4 \cdot 1
\end{bmatrix} =
\begin{bmatrix}
5 &amp; 2 \\
11 &amp; 4
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord">@</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mi mathvariant="normal">∥</mi><mi>h</mi><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup><mo>=</mo><mo>∑</mo><msubsup><mi>h</mi><mrow><mi>i</mi><mi>j</mi></mrow><mn>2</mn></msubsup><mo>=</mo><msup><mn>5</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>4</mn><mn>2</mn></msup><mo>=</mo><mn>25</mn><mo>+</mo><mn>4</mn><mo>+</mo><mn>121</mn><mo>+</mo><mn>16</mn><mo>=</mo><mn>166</mn></mrow><annotation encoding="application/x-tex">L = \|h\|^2 = \sum h_{ij}^2 = 5^2 + 2^2 + 11^2 + 4^2 = 25 + 4 + 121 + 16 = 166
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathdefault">h</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">6</span></span></span></span></span></p>
<p>计算图：</p>
<pre><code>     X        W
      \      /
       @ --&gt; h (2x2)
         \
          \
           sum(h²) --&gt; L=166
</code></pre>
<p>反向传播：要求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>X</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial W}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。<br>
根据矩阵微分的知识，</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>h</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>h</mi><mo>=</mo><mn>2</mn><mo>⋅</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>22</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial h} = 2h = 2 \cdot \begin{bmatrix} 5 &amp; 2 \\ 11 &amp; 4 \end{bmatrix} = \begin{bmatrix} 10 &amp; 4 \\ 22 &amp; 8 \end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac><mo>=</mo><msup><mi>X</mi><mi>T</mi></msup><mi mathvariant="normal">@</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>h</mi></mrow></mfrac><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi mathvariant="normal">@</mi><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>22</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>⋅</mo><mn>10</mn><mo>+</mo><mn>3</mn><mo>⋅</mo><mn>22</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>⋅</mo><mn>4</mn><mo>+</mo><mn>3</mn><mo>⋅</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mo>⋅</mo><mn>10</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>22</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mo>⋅</mo><mn>4</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>8</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>76</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>28</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>108</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>40</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial W} = X^T @ \frac{\partial L}{\partial h} =
\begin{bmatrix} 1 &amp; 3 \\ 2 &amp; 4 \end{bmatrix} @
\begin{bmatrix} 10 &amp; 4 \\ 22 &amp; 8 \end{bmatrix} =
\begin{bmatrix}
1 \cdot 10 + 3 \cdot 22 &amp; 1 \cdot 4 + 3 \cdot 8 \\
2 \cdot 10 + 4 \cdot 22 &amp; 2 \cdot 4 + 4 \cdot 8
\end{bmatrix} =
\begin{bmatrix}
76 &amp; 28 \\
108 &amp; 40
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord">@</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">@</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mord">6</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>X</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>L</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>h</mi></mrow></mfrac><mi mathvariant="normal">@</mi><msup><mi>W</mi><mi>T</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>22</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi mathvariant="normal">@</mi><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>10</mn><mo>⋅</mo><mn>1</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>10</mn><mo>⋅</mo><mn>2</mn><mo>+</mo><mn>4</mn><mo>⋅</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>22</mn><mo>⋅</mo><mn>1</mn><mo>+</mo><mn>8</mn><mo>⋅</mo><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>22</mn><mo>⋅</mo><mn>2</mn><mo>+</mo><mn>8</mn><mo>⋅</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>24</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>22</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>52</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\frac{\partial L}{\partial X} = \frac{\partial L}{\partial h} @ W^T =
\begin{bmatrix} 10 &amp; 4 \\ 22 &amp; 8 \end{bmatrix} @
\begin{bmatrix} 1 &amp; 2 \\ 0 &amp; 1 \end{bmatrix} =
\begin{bmatrix}
10 \cdot 1 + 4 \cdot 0 &amp; 10 \cdot 2 + 4 \cdot 1 \\
22 \cdot 1 + 8 \cdot 0 &amp; 22 \cdot 2 + 8 \cdot 1
\end{bmatrix} =
\begin{bmatrix}
10 &amp; 24 \\
22 &amp; 52
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">h</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">@</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">@</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">4</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p>ps. 这里的矩阵乘法反向传播同样遵循“L对某个变量求导，就是拿传播值乘以另一个变量”，与前述“多变量标量函数”部分有共通之处。</p>
<h3 id="总结">总结</h3>
<p>由上述案例可知，<strong>计算图</strong>是描述前向传播、反向传播过程的一个通用手段。<br>
它将反向传播中每一步的导数计算简化为<strong>上一步传播的值 乘以 这一步的导数</strong>，<br>
通过记录前向传播中经历的函数过程及相应变量的值，达成了反向传播的计算。</p>
<p><strong>前向传播</strong>即是由输入变量经过模型（即一系列的函数操作）得到输出变量的过程。<br>
（输出变量经历激活函数，与实际变量通过损失函数计算出损失）<br>
<strong>反向传播</strong>即是由损失值逆着模型（即一系列的求导运算）计算出损失函数对各个输入变量的偏导数。<br>
（得到偏导数是为了优化器可以采用梯度下降等方式更新模型参数）</p>
<p>在这样观察了之后，对PyTorch的训练与推理的函数过程就了解得比较完整了。</p>
<blockquote>
<p>edit time: 2025-07-02 17:07:11 （Fundamentals√）<br>
edit time: 2025-07-02 17:54:05 （ML Primer√）<br>
edit time: 2025-07-07 23:33:57 （AutoDiff√）<br>
edit time: 2025-07-15 17:18:18 （Tensors√）<br>
edit time: 2025-07-23 22:29:56‎ （Efficiency√）<br>
edit time: 2025-08-03 22:09:45 （附: 基于Pytorch代码，讲讲反向传播和计算图√）</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IEEE754 浮点数与十进制数互相转换流程及例子]]></title>
        <id>https://meredith2328.github.io/post/ieee754/</id>
        <link href="https://meredith2328.github.io/post/ieee754/">
        </link>
        <updated>2025-06-16T17:43:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>edit time: 2025-06-17 01:43:17<br>
ps. 以下所有例子里的s都取0，即我们考虑的是正数和正0的浮点表示。<br>
s取1就是给正数前面添个负号。<br>
以下未引入由于精度带来舍入问题的例子。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://meredith2328.github.io/post-images/20250617014314.png" alt="" loading="lazy"></figure>
<h2 id="十进制数转浮点数-浮点数转十进制数步骤">十进制数转浮点数、浮点数转十进制数步骤</h2>
<p><strong>十进制数转浮点数步骤：</strong></p>
<ol>
<li>十进制转二进制，如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10.00</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">10.001_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li>
<li>二进制转二进制的科学计数法表示（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi>x</mi><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mrow><mi>y</mi><mi>y</mi><mi>y</mi></mrow></msup></mrow><annotation encoding="application/x-tex">1.xxx_2 \times 2^{yyy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span></span></span></span></span>），如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.00</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">1.001_{2} \times 2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>，根据指数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mi>y</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">yyy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>参考下述“规格化和非规格化判断”。</li>
<li>根据二进制的科学计数法表示，参考下述“M和E是多少”，写出s, exp, frac。</li>
</ol>
<p><strong>浮点数转十进制数步骤</strong>：反过来<br>
根据exp判断为规格化、非规格化、无穷大、NaN中的哪一种，<br>
如果为规格化和非规格化，则将exp和frac按照对应规则转化为E和M，<br>
进而得到表示的数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mi>s</mi></msup><mo>×</mo><mi>M</mi><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">V=(-1)^s \times M \times 2^E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span>。</p>
<h2 id="规格化和非规格化判断">规格化和非规格化判断</h2>
<blockquote>
<p>省流：看要表示的数的二进制科学计数法的指数是否在规格化可提供的E范围内。</p>
</blockquote>
<p>以s, exp, frac三个二进制段长度为1, 4, 3为例：<br>
根据浮点数表示给出的exp段长度k=4，可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">Bias = 2^{k - 1} - 1=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9324379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>。<br>
<strong>非规格化数</strong>是形如 0 0000 xxx 等的形式，即中间exp段全0。<br>
<strong>规格化数</strong>是形如 0 0011 xxx 等的形式，即中间exp段既不全0、也不全1。<br>
<strong>无穷大</strong>是 0 1111 000，即中间exp段全1且frac段全0。<br>
<strong>NaN</strong>是 0 1111 xxx（xxx≠000），即中间exp段全1且frac段不为全0。</p>
<p>由规格化数的定义可以推得：<br>
<strong>最小的规格化数</strong>为 0 <strong>0001</strong> 000，即exp为0001。<br>
<strong>最大的规格化数</strong>为 0 <strong>1110</strong> 111，即exp为1110。<br>
ps. 可以记住：右边的frac从000到111对应的数逐渐增大，从而推得最小和最大的规格化数。</p>
<p>对于规格化数，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">E = exp - Bias</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span></span></span></span>，<br>
所以最小的规格化数对应的E=1-7=<strong>-6</strong>（<strong>0001</strong>对应1），<br>
最大的规格化数对应的E=14-7=<strong>7</strong>（<strong>1110</strong>对应14）。<br>
关键：<br>
<strong>要表示的数的二进制科学计数法的指数在规格化能提供的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mo>−</mo><mn>6</mn><mo separator="true">,</mo><mn>7</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[-6, 7]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mclose">]</span></span></span></span>范围内，就一律为规格化数。</strong><br>
<strong>如果指数小于-6，则为非规格化数。</strong><br>
<strong>如果指数大于7，则为无穷大。</strong></p>
<h2 id="m和e是多少">M和E是多少</h2>
<blockquote>
<p>省流：<br>
根据判断出的是规格化还是非规格化，<br>
把二进制的科学计数法表示的小数部分和指数部分套进对应的规则。</p>
</blockquote>
<p>eg. 下面表示里s, exp, frac三个二进制段长度为1, 4, 3</p>
<p>总结：还是以这个例子为例，<br>
<strong>要表示的数的二进制科学计数法的指数在规格化能提供的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mo>−</mo><mn>6</mn><mo separator="true">,</mo><mn>7</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[-6, 7]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">7</span><span class="mclose">]</span></span></span></span>范围内，就一律为规格化数，E即为指数，M=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi>x</mi><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">1.xxx_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</strong><br>
<strong>如果指数小于-6，则为非规格化数，E取-6，把科学计数法表示拆成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi>x</mi><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mrow><mi>y</mi><mi>y</mi><mi>y</mi><mo>−</mo><mi>E</mi></mrow></msup><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">1.xxx_2 \times 2^{yyy-E} \times 2^{E}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span> 的形式。M=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi>x</mi><mi>x</mi><msub><mi>x</mi><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mrow><mi>y</mi><mi>y</mi><mi>y</mi><mo>−</mo><mi>E</mi></mrow></msup></mrow><annotation encoding="application/x-tex">1.xxx_2 \times 2^{yyy-E}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault">x</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span>，从而M是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.</mn><mi>z</mi><mi>z</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">0.zzz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>的形式，以表示更小的指数。如果指数实在太小（见备注），则直接用0表示。</strong><br>
<strong>如果指数大于7，则用无穷大表示，不需要E和M。</strong></p>
<p>在根据要表示的数的二进制科学计数法得到M和E之后，就能得到exp和frac字段：</p>
<ol>
<li>
<p><strong>M和frac字段</strong><br>
非规格化数frac字段对应的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>是 <strong>0.frac</strong>，即0.连上frac部分。<br>
eg. 0 0000 <strong>010</strong>对应的小数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.01</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">0.010_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> * 2^(-6) （为什么是-6后面说）<br>
规格化数frac字段对应的M是 <strong>1.frac</strong>，即1.连上frac部分。<br>
eg. 0 0111 <strong>001</strong>对应的小数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.00</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">1.001_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> * 2^0（为什么是0后面说）</p>
</li>
<li>
<p><strong>E和exp字段</strong><br>
非规格化数，exp字段对应的E是1-Bias。<br>
eg. 0 0000 010对应的Bias是2^(4-1)-1=7（exp长度为4），E=1-7=-6，故对应的小数是0.010 * 2^(<strong>-6</strong>)<br>
规格化数，exp字段对应的E是exp-Bias。<br>
eg. 0 <strong>0111</strong> 001对应的Bias是2^(4-1)-1=7（exp长度为4），E=<strong>exp</strong>-Bias=<strong>7</strong>-7=0，故对应的小数是1.001 * 2^<strong>0</strong>。</p>
</li>
</ol>
<p>注意exp和frac字段补0的方式不同，就像是它们之间有一个小数点一样。<br>
exp是往前补0，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">10_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>补0变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0010</mn></mrow><annotation encoding="application/x-tex">0010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，<br>
frac是往后补0，比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">01_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>补0变成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>010</mn></mrow><annotation encoding="application/x-tex">010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span></span>。</p>
<p>备注. “指数实在太小”是多小？<br>
最小的非规格化数，上例即0 0000 001，此时E=1-7=-6，M=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.00</mn><msub><mn>1</mn><mn>2</mn></msub><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">0.001_2=2^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>，这个数是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>9</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>。<br>
如果再小一些、且不能舍入到最小的非规格化数，就只能舍入到0 0000 000即0了。</p>
<h2 id="例题">例题</h2>
<p>以下例子不小心只有规格化和NaN，非规格化、指数太大、指数太小再找点例子练练。</p>
<blockquote>
<p>例题1：十进制转换为浮点表示。将0.625转换为浮点数表示，s, exp, frac分别为1, 4, 3位。</p>
</blockquote>
<ol start="0">
<li>顺手算一下Bias = 2^(k - 1) - 1 = 2^(4-1)-1=7，其中k是exp的位数。</li>
<li>十转二，整数除二看余、小数乘二看整。0.625乘二、乘二、乘二得到的整数分别为1、0、1，故它的二进制表示是0.<strong>101</strong>。</li>
<li>转换为1.xxx的形式，即1.<strong>01</strong> ^ 2(<strong>-1</strong>)。</li>
<li>对应到V的式子上，M=1.01，E=-1。因为E大于规格化数表示中最小的E（exp值为1、E=exp-Bias=1-7=-6），所以这个数按照规格化表示。</li>
<li>规格化表示的frac直接写M舍去1和小数点、后面的一段（M=1.<strong>01</strong> -&gt; frac表示为010，注意根据位数<strong>往后</strong>补0）。exp=E+Bias=(-1)+7=6，exp表示为0110，注意根据位数<strong>往前</strong>补0。</li>
</ol>
<p>综上，s是0（正数），exp是0110，frac是001，所以0.625的浮点数表示是0 0110 001。</p>
<blockquote>
<p>例题2：十进制转换为浮点表示。将1.75转换为浮点数表示，s, exp, frac分别为1, 4, 3位。</p>
</blockquote>
<ol start="0">
<li>Bias = 2^(4-1)-1=7。</li>
<li>1.75 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.1</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">1.11_{(2)} \times 2^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></li>
<li>M=1.11，E=0，E&gt;1-7=-6，所以规格化表示。</li>
<li>frac表示为110（注意往<strong>后</strong>补0），exp=0+7=7，表示为0111。</li>
</ol>
<p>综上，1.75 表示为 0 0111 110。</p>
<blockquote>
<p>例题3：浮点表示转换为十进制。0 0111 110表示的数是多少？s, exp, frac分别为1, 4, 3位。</p>
</blockquote>
<p>exp段是0111，不是全0、不是全1，所以是规格化。<br>
M=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.11</mn><msub><mn>0</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">1.110_{(2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>，<br>
E=exp-Bias=7-7=0。<br>
s=0。<br>
所以表示的数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mi>s</mi></msup><mo>×</mo><mi>M</mi><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup><mo>=</mo><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mn>0</mn></msup><mo>×</mo><mn>1.1</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub><mo>×</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1.1</mn><msub><mn>1</mn><mn>2</mn></msub><mo>=</mo><mn>1.75</mn></mrow><annotation encoding="application/x-tex">V=(-1)^s \times M \times 2^E = (-1)^0 \times 1.11_{(2)} \times 2^0 = 1.11_{2}=1.75</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">5</span></span></span></span></p>
<blockquote>
<p>例题4：十进制转换为浮点表示。0.375表示成多少？s, exp, frac分别为1, 4, 3位。</p>
</blockquote>
<ol start="0">
<li>Bias = 7。</li>
<li>0.375 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0.01</mn><msub><mn>1</mn><mrow><mo>(</mo><mn>2</mn><mo>)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">0.011_{(2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9996399999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>，图省事口算转换也可以想0.375 = 1/4 + 1/8，然后1/4和1/8对应的那两位为1。再转换成科学计数法就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.1</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.1 \times 2^{-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>M=1.1，E=-2，则frac为100，exp为E+Bias=5就是0101，故表示为 0 0101 100。</li>
</ol>
<blockquote>
<p>例题5：√-1表示成多少？</p>
</blockquote>
<p>NaN，可以写0 1111 001之类的。</p>
<p><strong>附录：对于上述s, exp, frac三个二进制段长度为1, 4, 3的非负数表格完整示例：</strong><br>
<img src="https://meredith2328.github.io/post-images/20250617184539.png" alt="" loading="lazy"><br>
ps. 建议从上表格任选位表示和十进制，练习从十进制推位表示或从位表示推十进制，熟练掌握转换方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS相关目录页]]></title>
        <id>https://meredith2328.github.io/post/cs/</id>
        <link href="https://meredith2328.github.io/post/cs/">
        </link>
        <updated>2024-08-30T02:00:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="待更新">待更新：</h1>
<p>计算机组成原理<br>
计算机网络<br>
数据库设计, 软件工程</p>
<h1 id="正在更新">正在更新：</h1>
<h2 id="minitorch">minitorch</h2>
<p>一个有趣的手写简易版pytorch的项目。有CS61A前置和一点人工智能基础就能写。<br>
已完成更新Setup, Fundamentals, ML Primer, Autodiff, Tensors, Efficiency部分。<br>
Networks不打算写了。</p>
<p><a href="https://meredith2328.github.io/post/minitorch/">MiniTorch</a></p>
<h2 id="csapp">CSAPP</h2>
<p>复旦大学软件工程专业的ICS课程lab，基本与CMU原版保持一致。</p>
<p><a href="https://meredith2328.github.io/post/csapp-shelllab/">Shelllab</a><br>
<a href="https://meredith2328.github.io/post/csapp-cachelab/">Cachelab</a><br>
<a href="https://meredith2328.github.io/post/csapp-attacklab/">Attacklab</a><br>
<a href="https://meredith2328.github.io/post/csapp-bomblab/">Bomblab</a><br>
<a href="https://meredith2328.github.io/post/csapp-datalab/">Datalab</a></p>
<h2 id="cs61a-2024-summer">CS61A 2024 summer</h2>
<p>只记录了Discussion(disc)部分的笔记：<br>
因为这一部分难度适中、有东西说，相关的笔记也能推广到lab和hw部分w<br>
跳过了不感兴趣的SQL和scheme部分。</p>
<p><a href="https://meredith2328.github.io/post/cs61a-disc07/">disc07 树、链表</a><br>
<a href="https://meredith2328.github.io/post/cs61a-disc05/">disc05 迭代、时空复杂度</a><br>
<a href="https://meredith2328.github.io/post/cs61a-disc04/">disc04 树的递归</a><br>
<a href="https://meredith2328.github.io/post/cs61a-disc03/">disc03 递归</a><br>
<a href="https://meredith2328.github.io/post/cs61a-disc02/">disc02 高阶函数</a><br>
<a href="https://meredith2328.github.io/post/cs61a-disc01/">disc01 “迭代与抽象”</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS61A disc07 树、链表]]></title>
        <id>https://meredith2328.github.io/post/cs61a-disc07/</id>
        <link href="https://meredith2328.github.io/post/cs61a-disc07/">
        </link>
        <updated>2024-08-30T01:57:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q1-is-bst">Q1: Is BST</h2>
<p>左子树的所有节点的值都小于等于父节点的值，<br>
右子树的所有节点的值都大于父节点的值。</p>
<pre><code class="language-python">def is_bst(t):
    &quot;&quot;&quot;Returns True if the Tree t has the structure of a valid BST.

    &gt;&gt;&gt; t1 = Tree(6, [Tree(2, [Tree(1), Tree(4)]), Tree(7, [Tree(7), Tree(8)])])
    &gt;&gt;&gt; is_bst(t1)
    True
    &gt;&gt;&gt; t2 = Tree(8, [Tree(2, [Tree(9), Tree(1)]), Tree(3, [Tree(6)]), Tree(5)])
    &gt;&gt;&gt; is_bst(t2)
    False
    &gt;&gt;&gt; t3 = Tree(6, [Tree(2, [Tree(4), Tree(1)]), Tree(7, [Tree(7), Tree(8)])])
    &gt;&gt;&gt; is_bst(t3)
    False
    &gt;&gt;&gt; t4 = Tree(1, [Tree(2, [Tree(3, [Tree(4)])])])
    &gt;&gt;&gt; is_bst(t4)
    True
    &gt;&gt;&gt; t5 = Tree(1, [Tree(0, [Tree(-1, [Tree(-2)])])])
    &gt;&gt;&gt; is_bst(t5)
    True
    &gt;&gt;&gt; t6 = Tree(1, [Tree(4, [Tree(2, [Tree(3)])])])
    &gt;&gt;&gt; is_bst(t6)
    True
    &gt;&gt;&gt; t7 = Tree(2, [Tree(1, [Tree(5)]), Tree(4)])
    &gt;&gt;&gt; is_bst(t7)
    False
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    def bst_max(t):
        if t.is_leaf():
            return t.label
        return max(t.label, max([bst_max(b) for b in t.branches]))

    def bst_min(t):
        if t.is_leaf():
            return t.label
        return min(t.label, min([bst_min(b) for b in t.branches]))

    if t.is_leaf():
        return True
    if len(t.branches) &gt; 2:
        return False
    elif len(t.branches) == 1:
        branch = t.branches[0]
        if is_bst(branch):
            return True
        else:
            return False
    else: # len(t.branches) == 2
        l, r = t.branches
        if bst_max(l) &lt;= t.label and t.label &lt; bst_min(r) and is_bst(l) and is_bst(r):
            return True
        else:
            return False
</code></pre>
<h2 id="q2-prune-small">Q2: Prune Small</h2>
<p>Solution 1</p>
<pre><code class="language-python">def prune_small(t, n):
    &quot;&quot;&quot;Prune the tree mutatively, keeping only the n branches
    of each node with the smallest labels.

    &gt;&gt;&gt; t1 = Tree(6)
    &gt;&gt;&gt; prune_small(t1, 2)
    &gt;&gt;&gt; t1
    Tree(6)
    &gt;&gt;&gt; t2 = Tree(6, [Tree(3), Tree(4)])
    &gt;&gt;&gt; prune_small(t2, 1)
    &gt;&gt;&gt; t2
    Tree(6, [Tree(3)])
    &gt;&gt;&gt; t3 = Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2), Tree(3)]), Tree(5, [Tree(3), Tree(4)])])
    &gt;&gt;&gt; prune_small(t3, 2)
    &gt;&gt;&gt; t3
    Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2)])])
    &quot;&quot;&quot;
    if t.is_leaf():
        return
    if len(t.branches) &gt; n:
        t.branches = [t.branches[i] for i in range(n)] # Only n left
    for b in t.branches:
        prune_small(b, n)
</code></pre>
<p>Solution 2</p>
<pre><code class="language-python">    while len(t.branches) &gt; n:
        largest = max(t.branches, key=lambda x: x.label)
        t.branches.remove(largest)
    for b in t.branches:
        prune_small(b, n)
</code></pre>
<h2 id="q3-sum-two-ways">Q3: Sum Two Ways</h2>
<pre><code class="language-python">def sum_rec(s):
    &quot;&quot;&quot;
    Returns the sum of the elements in s.

    &gt;&gt;&gt; a = Link(1, Link(6, Link(7)))
    &gt;&gt;&gt; sum_rec(a)
    14
    &gt;&gt;&gt; sum_rec(Link.empty)
    0
    &quot;&quot;&quot;
    # Use a recursive call to sum_rec
    &quot;*** YOUR CODE HERE ***&quot;
    if s is Link.empty:
        return 0
    return s.first + sum_rec(s.rest)

def sum_iter(s):
    &quot;&quot;&quot;
    Returns the sum of the elements in s.

    &gt;&gt;&gt; a = Link(1, Link(6, Link(7)))
    &gt;&gt;&gt; sum_iter(a)
    14
    &gt;&gt;&gt; sum_iter(Link.empty)
    0
    &quot;&quot;&quot;
    # Don't call sum_rec or sum_iter
    &quot;*** YOUR CODE HERE ***&quot;
    sum = 0
    p = s
    while p is not Link.empty:
        sum += p.first
        p = p.rest
    return sum
</code></pre>
<h2 id="q4-overlap">Q4: Overlap</h2>
<pre><code class="language-python">def overlap(s, t):
    &quot;&quot;&quot;For increasing s and t, count the numbers that appear in both.

    &gt;&gt;&gt; a = Link(3, Link(4, Link(6, Link(7, Link(9, Link(10))))))
    &gt;&gt;&gt; b = Link(1, Link(3, Link(5, Link(7, Link(8)))))
    &gt;&gt;&gt; overlap(a, b)  # 3 and 7
    2
    &gt;&gt;&gt; overlap(a.rest, b)  # just 7
    1
    &gt;&gt;&gt; overlap(Link(0, a), Link(0, b))
    3
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    if s is Link.empty or t is Link.empty:
        return 0
    if s.first == t.first:
        return 1 + overlap(s.rest, t.rest)
    elif s.first &lt; t.first:
        return overlap(s.rest, t)
    else:
        return overlap(s, t.rest)

def overlap_iterative(s, t):
    &quot;&quot;&quot;For increasing s and t, count the numbers that appear in both.

    &gt;&gt;&gt; a = Link(3, Link(4, Link(6, Link(7, Link(9, Link(10))))))
    &gt;&gt;&gt; b = Link(1, Link(3, Link(5, Link(7, Link(8)))))
    &gt;&gt;&gt; overlap(a, b)  # 3 and 7
    2
    &gt;&gt;&gt; overlap(a.rest, b)  # just 7
    1
    &gt;&gt;&gt; overlap(Link(0, a), Link(0, b))
    3
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    count = 0
    while (s is not Link.empty and t is not Link.empty):
        if s.first == t.first:
            count += 1
            s, t = s.rest, t.rest
        elif s.first &lt; t.first:
            s = s.rest
        else:
            t = t.rest
    return count
</code></pre>
<h2 id="q5-duplicate-link">Q5: Duplicate Link</h2>
<pre><code class="language-python">def duplicate_link(s, val):
    &quot;&quot;&quot;Mutates s so that each element equal to val is followed by another val.

    &gt;&gt;&gt; x = Link(5, Link(4, Link(5)))
    &gt;&gt;&gt; duplicate_link(x, 5)
    &gt;&gt;&gt; x
    Link(5, Link(5, Link(4, Link(5, Link(5)))))
    &gt;&gt;&gt; y = Link(2, Link(4, Link(6, Link(8))))
    &gt;&gt;&gt; duplicate_link(y, 10)
    &gt;&gt;&gt; y
    Link(2, Link(4, Link(6, Link(8))))
    &gt;&gt;&gt; z = Link(1, Link(2, (Link(2, Link(3)))))
    &gt;&gt;&gt; duplicate_link(z, 2) # ensures that back to back links with val are both duplicated
    &gt;&gt;&gt; z
    Link(1, Link(2, Link(2, Link(2, Link(2, Link(3))))))
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    p = s
    while (p is not Link.empty):
        if p.first == val:
            p.rest = Link(val, p.rest)
            p = p.rest.rest
        else:
            p = p.rest
</code></pre>
<h2 id="q6-decimal-expansion">Q6: Decimal Expansion</h2>
<p>Hint写得很清楚，摘抄一下。</p>
<p><strong>Hint: Approach</strong><br>
Place the division pattern from the example above in a <code>while</code> statement:</p>
<pre><code>&gt;&gt;&gt; q, r = 10 * n // d, 10 * n % d
&gt;&gt;&gt; tail.rest = Link(q)
&gt;&gt;&gt; tail = tail.rest
&gt;&gt;&gt; n = r
</code></pre>
<p>While constructing the decimal expansion, store the <code>tail</code> for each <code>n</code> in a dictionary keyed by <code>n</code>. When some <code>n</code> appears a second time, instead of constructing a new <code>Link</code>, set its original link as the rest of the previous link. That will form a cycle of the appropriate length.</p>
<pre><code class="language-python">def divide(n, d):
    &quot;&quot;&quot;Return a linked list with a cycle containing the digits of n/d.

    &gt;&gt;&gt; display(divide(5, 6))
    0.8333333333...
    &gt;&gt;&gt; display(divide(2, 7))
    0.2857142857...
    &gt;&gt;&gt; display(divide(1, 2500))
    0.0004000000...
    &gt;&gt;&gt; display(divide(3, 11))
    0.2727272727...
    &gt;&gt;&gt; display(divide(3, 99))
    0.0303030303...
    &gt;&gt;&gt; display(divide(2, 31), 50)
    0.06451612903225806451612903225806451612903225806451...
    &quot;&quot;&quot;
    assert n &gt; 0 and n &lt; d
    result = Link(0)  # The zero before the decimal point
    &quot;*** YOUR CODE HERE ***&quot;
    tail_dict = {}
    tail = result
    while (n not in tail_dict):
        q, r = 10 * n // d, 10 * n % d # eg. 8, 2
        tail.rest = Link(q)
        tail = tail.rest
        tail_dict[n] = tail
        n = r
    tail.rest = tail_dict[n]
    return result

</code></pre>
<h2 id="hw05q6-store-digits">HW05Q6: Store Digits</h2>
<p>（懒得再开一个HW05页了，这一道题比较经典，顺手标记一下）<br>
经典老题，把整数的每一位作为链表的节点值构造链表。<br>
关键是要想到：我们容易得到的是 <code>n // 10</code> 和 <code>n % 10</code>。<br>
以<code>2345</code>举例，构造<code>2345</code>时是在已知<code>234</code>而非<code>345</code>的构造的情况下。<br>
因此我们要做的就是在<code>234</code>构造的末尾加上一个<code>5</code>（先遍历到末尾节点、再添加），<br>
而非在<code>345</code>的开头加上一个<code>2</code>（直接构造 <code>Link(2, 345的Link)</code>。</p>
<pre><code class="language-python">def store_digits(n):
    &quot;&quot;&quot;Stores the digits of a positive number n in a linked list.

    &gt;&gt;&gt; s = store_digits(1)
    &gt;&gt;&gt; s
    Link(1)
    &gt;&gt;&gt; store_digits(2345)
    Link(2, Link(3, Link(4, Link(5))))
    &gt;&gt;&gt; store_digits(876)
    Link(8, Link(7, Link(6)))
    &gt;&gt;&gt; store_digits(2450)
    Link(2, Link(4, Link(5, Link(0))))
    &gt;&gt;&gt; # a check for restricted functions
    &gt;&gt;&gt; import inspect, re
    &gt;&gt;&gt; cleaned = re.sub(r&quot;#.*\\n&quot;, '', re.sub(r'&quot;{3}[\s\S]*?&quot;{3}', '', inspect.getsource(store_digits)))
    &gt;&gt;&gt; print(&quot;Do not use str or reversed!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;reversed&quot;]]) else None
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    if n &lt; 10:
        return Link(n)
    before = store_digits(n // 10)
    p = before
    while p.rest != Link.empty:
        p = p.rest
    p.rest = Link(n % 10)
    return before
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS61A disc05 迭代、时空复杂度]]></title>
        <id>https://meredith2328.github.io/post/cs61a-disc05/</id>
        <link href="https://meredith2328.github.io/post/cs61a-disc05/">
        </link>
        <updated>2024-08-30T01:57:27.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>edit time: 2024-07-24 12:19:44</p>
</blockquote>
<h2 id="q1-wwpd-iterators">Q1: WWPD: Iterators</h2>
<pre><code class="language-python">&gt;&gt;&gt; s = &quot;cs61a&quot;
&gt;&gt;&gt; s_iter = iter(s)
&gt;&gt;&gt; next(s_iter)
'c'
&gt;&gt;&gt; next(s_iter)
's'
&gt;&gt;&gt; list(s_iter)
['6', '1', 'a']
&gt;&gt;&gt; s = [[1, 2, 3, 4]]
&gt;&gt;&gt; i = iter(s)
&gt;&gt;&gt; j = iter(next(i))
&gt;&gt;&gt; next(j)
1
&gt;&gt;&gt; s.append(5)
&gt;&gt;&gt; next(i)
5
&gt;&gt;&gt; next(j)
2
&gt;&gt;&gt; list(j)
[3, 4]
&gt;&gt;&gt; next(i)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
StopIteration
</code></pre>
<h2 id="q2-repeated">Q2: Repeated</h2>
<pre><code class="language-python">def repeated(t, k):
    &quot;&quot;&quot;Return the first value in iterator t that appears k times in a row,
    calling next on t as few times as possible.

    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])
    &gt;&gt;&gt; repeated(s, 2)
    9
    &gt;&gt;&gt; t = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])
    &gt;&gt;&gt; repeated(t, 3)
    8
    &gt;&gt;&gt; u = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])
    &gt;&gt;&gt; repeated(u, 3)
    2
    &gt;&gt;&gt; repeated(u, 3)
    5
    &gt;&gt;&gt; v = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])
    &gt;&gt;&gt; repeated(v, 3)
    2
    &quot;&quot;&quot;
    assert k &gt; 1
    &quot;*** YOUR CODE HERE ***&quot;
    count = 0
    num = 0
    for e in t:
        if e != num:
            count = 1
            num = e
        else:
            count += 1
        if count == k:
            return num
</code></pre>
<h2 id="q3-something-different">Q3: Something Different</h2>
<p>使用<code>try-except</code>块是为了在循环内调用<code>next(t)</code>足够多次、通过<code>StopIteration</code>退出循环时将其处理掉。</p>
<pre><code class="language-python">def differences(t):
    &quot;&quot;&quot;Yield the differences between adjacent values from iterator t.

    &gt;&gt;&gt; list(differences(iter([5, 2, -100, 103])))
    [-3, -102, 203]
    &gt;&gt;&gt; next(differences(iter([39, 100])))
    61
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    val = next(t)
    try:
        while True:
            next_val = next(t)
            yield next_val - val
            val = next_val
    except StopIteration:
        pass
</code></pre>
<h2 id="q4-primes-generator">Q4: Primes Generator</h2>
<p>用<code>for</code>还是很直接的，重点提一下用<code>yield from</code>构造生成函数的递归。</p>
<pre><code class="language-python">def primes_gen(n):
    &quot;&quot;&quot;Generates primes in decreasing order.
    &gt;&gt;&gt; pg = primes_gen(7)
    &gt;&gt;&gt; list(pg)
    [7, 5, 3, 2]
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    for i in range(n, 1, -1):
        if is_prime(i):
            yield i
</code></pre>
<p>首先理解<code>yield from</code>，它是使用另外一个迭代器，效果类似于 <code>for item in iterable: yield item</code>。</p>
<pre><code class="language-python">def generatorUsed():
	yield 'Q'
	yield 'A'
	yield 'Q'

def generatorUser():
	yield '233'
	yield from generatorUsed()
</code></pre>
<p>仅此还不够直观，不妨了解一个词语：“<strong>委派</strong>”：上述的<code>generatorUser</code>在第一次<code>__next__()</code>时产生<code>233</code>（“自己负责的”），而在后续<code>__next__()</code>时，就“交给<code>generatorUsed</code>来负责了”，<code>generatorUsed</code>负责处理后续的三次<code>__next__()</code>。<br>
<s>おまかせ</s></p>
<p>这件事和我们所学的<strong>过程-抽象</strong>其实是很类似的，以一道递归题目（disc03中Q3: Skip Factorial）为例：</p>
<pre><code class="language-python">def skip_factorial(n):
    &quot;&quot;&quot;Return the product of positive integers n * (n - 2) * (n - 4) * ...

    &gt;&gt;&gt; skip_factorial(5) # 5 * 3 * 1
    15
    &gt;&gt;&gt; skip_factorial(8) # 8 * 6 * 4 * 2
    384
    &quot;&quot;&quot;
    if n == 1 or n == 2:
        return n
    else:
        return n * skip_factorial(n - 2)
</code></pre>
<p>它就像是本函数来负责某某情况，其他的情况处理一下之后就<strong>交给</strong> <code>skip_factorial(n - 2)</code>了。<br>
这个“交给”正是与这一道涉及生成器的题目相同的抽象。下述是实现：</p>
<pre><code class="language-python">def primes_gen(n):
    &quot;&quot;&quot;Generates primes in decreasing order.
    &gt;&gt;&gt; pg = primes_gen(7)
    &gt;&gt;&gt; list(pg)
    [7, 5, 3, 2]
    &quot;&quot;&quot;
    if n == 1:
        return
    if is_prime(n):
        yield n
    yield from primes_gen(n - 1)
</code></pre>
<p>上述对“交给”（委派）的阐述即是利用<code>yield from</code>构造了生成函数的递归。</p>
<h2 id="q5-partitions">Q5: Partitions</h2>
<p>注意这里的<code>for</code>遇到了 <code>yield</code> 时就与我们熟悉的执行顺序（一股脑全部执行完）不相同了：每次都会在<code>yield</code>那里“停一下”，直到进行下次迭代。</p>
<pre><code class="language-python">def partition_gen(n, m):
    &quot;&quot;&quot;Yield the partitions of n using parts up to size m.

    &gt;&gt;&gt; for partition in sorted(partition_gen(6, 4)):
    ...     print(partition)
    1 + 1 + 1 + 1 + 1 + 1
    1 + 1 + 1 + 1 + 2
    1 + 1 + 1 + 3
    1 + 1 + 2 + 2
    1 + 1 + 4
    1 + 2 + 3
    2 + 2 + 2
    2 + 4
    3 + 3
    &quot;&quot;&quot;
    assert n &gt; 0 and m &gt; 0
    if n == m:
        yield str(m)
    if n - m &gt; 0:
        &quot;*** YOUR CODE HERE ***&quot;
        # 使用m的情况: n &gt; m
        for p in partition_gen(n - m, m):
            yield p + ' + ' + str(m)
    if m &gt; 1:
        &quot;*** YOUR CODE HERE ***&quot;
        # 不使用m的情况: 此时 n &lt; m且m &gt; 1
        yield from partition_gen(n, m - 1)


</code></pre>
<h2 id="q6-bonk">Q6: Bonk</h2>
<p><a href="https://cs61a.org/study-guide/orders-of-growth/">Study Guide: Orders of Growth | CS 61A Summer 2024</a></p>
<blockquote>
<p>Q6-Q8仅凭自己理解大概写的，没有系统了解 <em>Big O</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span>) 和 <em>Big Theta</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span>)，可能有明显的符号使用不规范或过程中的错误，还望不吝赐教。</p>
</blockquote>
<ul>
<li>Logarithmic</li>
</ul>
<p>记 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">bonk(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 为该函数在参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的执行次数，<br>
设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>n</mi><mi>k</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">bonk(1)=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> ，<br>
注意到</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo>⌊</mo><mi>b</mi><mi>o</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>)</mo><mo>⌋</mo></mrow><annotation encoding="application/x-tex">bonk(n)=1+ \lfloor bonk(n / 2) \rfloor
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">⌋</span></span></span></span></span></p>
<p>故</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>n</mi><mi>k</mi><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">bonk(2^n)=n \times C
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p>
<p>即为Logarithmic.</p>
<h2 id="q7-boom">Q7: Boom</h2>
<p><a href="https://cs61a.org/study-guide/orders-of-growth/">Study Guide: Orders of Growth | CS 61A Summer 2024</a></p>
<blockquote>
<p>Q6-Q8仅凭自己理解大概写的，没有系统了解 <em>Big O</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span>) 和 <em>Big Theta</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span>)，可能有明显的符号使用不规范或过程中的错误，还望不吝赐教。</p>
</blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>4</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>因为是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo><mo>×</mo><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^2) \times \Theta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<h2 id="q8-boink">Q8: Boink</h2>
<p><a href="https://cs61a.org/study-guide/orders-of-growth/">Study Guide: Orders of Growth | CS 61A Summer 2024</a></p>
<blockquote>
<p>Q6-Q8仅凭自己理解大概写的，没有系统了解 <em>Big O</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span>) 和 <em>Big Theta</em> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span>)，可能有明显的符号使用不规范或过程中的错误，还望不吝赐教。</p>
</blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>记 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">boink(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 为该函数在参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的执行次数，设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">boink(1)=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> ，注意到 n = k 时，执行次数为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>k</mi><mo>)</mo><mo>=</mo><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mn>2</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>b</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>k</mi><mo>(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">boink(k) = boink(1) + boink(2) + ... + boink(k - 1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p>上述类似于数列中的</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>S</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">a(n)=S(n - 1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p>又根据前n项和的定义有</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>S</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>−</mo><mi>S</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">a(n)=S(n)-S(n - 1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p>故</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mn>2</mn><mi>S</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mi>S</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>C</mi><mo>×</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">S(n)=2S(n-1)=2^nS(1)=C \times 2^n
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>S</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>C</mi><mo>×</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">a(n)=S(n-1)=C\times2^{n-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS61A disc04 树的递归]]></title>
        <id>https://meredith2328.github.io/post/cs61a-disc04/</id>
        <link href="https://meredith2328.github.io/post/cs61a-disc04/">
        </link>
        <updated>2024-08-30T01:57:10.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>edit time: 2024-07-19 19:11:45</p>
</blockquote>
<h2 id="describing-the-recursive-case-in-words">describing the recursive case in words</h2>
<p>For the following questions, don't start trying to write code right away. Instead, start by <strong>describing the recursive case in words</strong>. Some examples:</p>
<ul>
<li>In <code>fib</code> from lecture, the recursive case is to add together the previous two Fibonacci numbers.</li>
<li>In <code>double_eights</code> from lab, the recursive case is to check for double eights in the rest of the number.</li>
<li>In <code>count_partitions</code> from lecture, the recursive case is to partition <code>n-m</code> using parts up to size <code>m</code> <strong>and</strong> to partition <code>n</code> using parts up to size <code>m-1</code>.</li>
</ul>
<h2 id="q1-insect-combinatorics">Q1: Insect Combinatorics</h2>
<p>基础情况略。<br>
递归情况：从左下出发的路径的可能数，是第一步往上走、之后的路径的可能数 加 第一步往右走，之后的路径的可能数。</p>
<pre><code class="language-python">def paths(m, n):
    &quot;&quot;&quot;Return the number of paths from one corner of an
    M by N grid to the opposite corner.

    &gt;&gt;&gt; paths(2, 2)
    2
    &gt;&gt;&gt; paths(5, 7)
    210
    &gt;&gt;&gt; paths(117, 1)
    1
    &gt;&gt;&gt; paths(1, 157)
    1
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    if m == 1 or n == 1:
        return 1
    return paths(m - 1, n) + paths(m, n - 1)
</code></pre>
<h2 id="q2-even-weighted">Q2: Even weighted</h2>
<p>先理解题目含义：<br>
<code>x = [1, 2, 3, 4, 5, 6]</code>，下标从0开始，只留下标为<code>0, 2, 4</code>的三个元素即 <code>[1, 3, 5]</code> ，之后将每个元素与之前提到的偶数下标相乘，即 <code>[1 * 0, 3 * 2, 5 * 4] = [0, 6, 20]</code>。</p>
<pre><code class="language-python">def even_weighted_loop(s):
    &quot;&quot;&quot;
    &gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]
    &gt;&gt;&gt; even_weighted_loop(x)
    [0, 6, 20]
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;

    result = []
    for i in range(len(s)):
        if (i % 2 == 0):
            result += [s[i] * i]
    return result
</code></pre>
<pre><code class="language-python">def even_weighted_comprehension(s):
    &quot;&quot;&quot;
    &gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]
    &gt;&gt;&gt; even_weighted_comprehension(x)
    [0, 6, 20]
    &quot;&quot;&quot;
    return [s[i] * i for i in range(len(s)) if i % 2 == 0]
</code></pre>
<h2 id="q3-has-path">Q3: Has Path</h2>
<p>递归情况：如果本节点值等于路径第一位，子分支中存在一个分支满足路径的剩余部分，则返回真。<br>
硬控我好几分钟的地方是python的列表切片后如果长度为1，仍然是一个列表。令人忍俊不禁。</p>
<pre><code class="language-python">def has_path(t, p):
    &quot;&quot;&quot;Return whether tree t has a path from the root with labels p.

    &gt;&gt;&gt; t2 = tree(5, [tree(6), tree(7)])
    &gt;&gt;&gt; t1 = tree(3, [tree(4), t2])
    &gt;&gt;&gt; has_path(t1, [5, 6])        # This path is not from the root of t1
    False
    &gt;&gt;&gt; has_path(t2, [5, 6])        # This path is from the root of t2
    True
    &gt;&gt;&gt; has_path(t1, [3, 5])        # This path does not go to a leaf, but that's ok
    True
    &gt;&gt;&gt; has_path(t1, [3, 5, 6])     # This path goes to a leaf
    True
    &gt;&gt;&gt; has_path(t1, [3, 4, 5, 6])  # There is no path with these labels
    False
    &quot;&quot;&quot;
    if p == [label(t)]:  # when len(p) is 1
        return True
    elif label(t) != p[0]:
        return False
    else:
        &quot;*** YOUR CODE HERE ***&quot;
        for child in branches(t):
            if has_path(child, p[1:]):
                return True
        return False
        # one line version:
        # return True in [has_path(child, p[1:]) for child in branches(t)]
</code></pre>
<h2 id="q4-find-path">Q4: Find Path</h2>
<p>不妨先抛弃题目模板，自行思考。<br>
仍然满足上一题“子情况中存在一个满足则返回该子情况，子情况全部不满足才返回不满足”。</p>
<pre><code class="language-python">def find_path(t, x):
    &quot;&quot;&quot;
    &gt;&gt;&gt; t2 = tree(5, [tree(6), tree(7)])
    &gt;&gt;&gt; t1 = tree(3, [tree(4), t2])
    &gt;&gt;&gt; find_path(t1, 5)
    [3, 5]
    &gt;&gt;&gt; find_path(t1, 4)
    [3, 4]
    &gt;&gt;&gt; find_path(t1, 6)
    [3, 5, 6]
    &gt;&gt;&gt; find_path(t2, 6)
    [5, 6]
    &gt;&gt;&gt; print(find_path(t1, 2))
    None
    &quot;&quot;&quot;
    if label(t) == x:
        return [label(t)]
    else:
        for child in branches(t):
            if find_path(child, x):
                return [label(t)] + find_path(child, x)
        return None
</code></pre>
<p>之后尝试与题目模板格式匹配：</p>
<pre><code class="language-python">def find_path(t, x):
    &quot;&quot;&quot;
    &gt;&gt;&gt; t2 = tree(5, [tree(6), tree(7)])
    &gt;&gt;&gt; t1 = tree(3, [tree(4), t2])
    &gt;&gt;&gt; find_path(t1, 5)
    [3, 5]
    &gt;&gt;&gt; find_path(t1, 4)
    [3, 4]
    &gt;&gt;&gt; find_path(t1, 6)
    [3, 5, 6]
    &gt;&gt;&gt; find_path(t2, 6)
    [5, 6]
    &gt;&gt;&gt; print(find_path(t1, 2))
    None
    &quot;&quot;&quot;
    if label(t) == x:
        return [label(t)]
    for child in branches(t):
        path = find_path(child, x)
        if path:
            return [label(t)] + path
    return None
</code></pre>
<p>（当时在<code>for</code>那里的空填了<code>else</code>，想到一个 <code>path = any([find_path(child, x) for child in branches(t)])</code>，之后会麻烦亿点、而且跟<code>path</code>这个变量名不匹配，xsl）</p>
<h2 id="q5-sprout-leaves">Q5: Sprout Leaves</h2>
<p>注意题目要求构造<code>tree</code>，而且在<code>branches</code>里的也是<code>tree</code>。<br>
思路很简单：<br>
如果是叶，则构造一个标签相同、带了新叶的树返回；<br>
如果不是叶，则构造一个标签相同、每个分支完成了<code>sprout leaves</code>（即题设要求的函数）的树返回。</p>
<pre><code class="language-python">def sprout_leaves(t, leaves):
    &quot;&quot;&quot;Sprout new leaves containing the labels in leaves at each leaf of
    the original tree t and return the resulting tree.

    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])
    &gt;&gt;&gt; print_tree(t1)
    1
      2
      3
    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])
    &gt;&gt;&gt; print_tree(new1)
    1
      2
        4
        5
      3
        4
        5

    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])
    &gt;&gt;&gt; print_tree(t2)
    1
      2
        3
    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])
    &gt;&gt;&gt; print_tree(new2)
    1
      2
        3
          6
          1
          2
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    if is_leaf(t):
        return tree(label(t), [tree(val) for val in leaves])
    return tree(label(t), [sprout_leaves(branch, leaves) for branch in branches(t)])
</code></pre>
<h2 id="q6-tree-deciphering">Q6: Tree Deciphering</h2>
<p><code>result</code>的值是<code>t1</code>和<code>t2</code>中较大的那棵树的所有子分支中最小的分支的标签。<br>
“大”与“小”通过比较<code>label(t)</code>判断。<br>
（<code>max(s, key=f)</code> returns the item <code>x</code> in <code>s</code> for which <code>f(x)</code> is largest.<br>
<code>max([t1, t2], key=label)</code> returns the tree with the largest label, in this case <code>t2</code>.）</p>
<pre><code class="language-python">def tree(label, branches=[]):
    for branch in branches:
        assert is_tree(branch), 'branches must be trees'
    return [label] + list(branches)

def label(tree):
    return tree[0]

def branches(tree):
    return tree[1:]

def is_leaf(tree):
    return not branches(tree)

def is_tree(tree):
    if type(tree) != list or len(tree) &lt; 1:
        return False
    for branch in branches(tree):
        if not is_tree(branch):
            return False
    return True

t2 = tree(5, [tree(6), tree(7)])
t1 = tree(3, [tree(4), t2])
result = label(min(branches(max([t1, t2], key=label)), key=label))
print(result)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CS61A disc03 递归]]></title>
        <id>https://meredith2328.github.io/post/cs61a-disc03/</id>
        <link href="https://meredith2328.github.io/post/cs61a-disc03/">
        </link>
        <updated>2024-08-30T01:56:28.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>edit time: 2024-07-18 20:57:12</p>
</blockquote>
<p>依旧遵从disc01的<strong>案例-过程-抽象-实现</strong>的思路。</p>
<p>为了简化本blog及之后的blog，对于部分题目，首先会省略写出实现后、代入案例检验的过程；也可能会只取一个案例做分析，其他案例请自行思考；还可能会省略从案例抽象出某些符号的观察思考过程，直接给出实现。<br>
在分析案例时可能会尽量将案例拆分开、遵照由简单到复杂的思考过程。如果某些步骤整合后一次性给出不易理解，可以尝试自行拆分。<br>
还请读者自行对比思考，尽量完整理解，注意掌握分析思想。如果对理解上述思路有疑惑，可以看看本blog中讲解比较详细的题目，或者之前讲解的<code>disc01</code>等。</p>
<h2 id="q1-warm-up-recursive-multiplication">Q1: Warm Up: Recursive Multiplication</h2>
<p>思考过程省略。</p>
<pre><code class="language-python">def multiply(m, n):
    &quot;&quot;&quot;Takes two positive integers and returns their product using recursion.
    &gt;&gt;&gt; multiply(5, 3)
    15
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    # Guarantee that m &gt;= n, to simplify recursion.
    if m &lt; n:
        m, n = n, m
    if n == 1:
        return m
    else:
        return m + multiply(m, n - 1)
</code></pre>
<h2 id="q2-swipe">Q2: Swipe</h2>
<p>base: n &lt; 10<br>
取案例。考虑两位数的情况：eg. <code>swipe(28)</code><br>
将其转化为：一些操作，以及对降一阶（在这里就是位数少一位）的值执行<code>swipe</code>，一种可行操作如下：</p>
<pre><code class="language-python">print(8)
swipe(2)
print(8)
</code></pre>
<p>注意中间一定要化用位数少一位的<code>swipe(2)</code>函数，而不是直接<code>print(2)</code>，这是为了构造递归，即从描述过程中取出某种抽象的、一般的物体；<br>
在递归时，我们只考虑本情况和“<strong>相对低阶一点</strong>”的情况，而不考虑无关的情况。如题目给出的调用<strong>四</strong>位数，我们只考虑怎样将其转化为一些操作和调用<strong>三</strong>位数；或者从调用<strong>三</strong>位数考虑转化为一些操作和调用<strong>两</strong>位数。<br>
将上述的<code>2</code>和<code>8</code>抽象为<code>n // 10</code>和<code>n % 10</code>，考虑一种实现如下：</p>
<pre><code class="language-python">def swipe(n):
    &quot;&quot;&quot;Print the digits of n, one per line, first backward then forward.

    &gt;&gt;&gt; swipe(2837)
    7
    3
    8
    2
    8
    3
    7
    &quot;&quot;&quot;
    if n &lt; 10:
        print(n)
    else:
        &quot;*** YOUR CODE HERE ***&quot;
        print(n % 10)
        swipe(n // 10)
        print(n % 10)
</code></pre>
<h2 id="q3-skip-factorial">Q3: Skip Factorial</h2>
<p>思考省略。</p>
<pre><code class="language-python">def skip_factorial(n):
    &quot;&quot;&quot;Return the product of positive integers n * (n - 2) * (n - 4) * ...

    &gt;&gt;&gt; skip_factorial(5) # 5 * 3 * 1
    15
    &gt;&gt;&gt; skip_factorial(8) # 8 * 6 * 4 * 2
    384
    &quot;&quot;&quot;
    if n == 1 or n == 2:
        return n
    else:
        return n * skip_factorial(n - 2)
</code></pre>
<h2 id="q4-recursive-hailstone">Q4: Recursive Hailstone</h2>
<p>这是第一次在递归中使用返回值计数。因为比较重要，这里多写一点。<br>
仍然从取案例开始，从案例中整理过程，从过程中抽象，从抽象到实现。</p>
<p><code>b = hailstone(1)</code>相对更简，取该案例分析。执行时首先打印，之后它的返回值是通过<code>return odd(1)</code>得到的，值为<code>1</code>。总结出一个命题：<code>odd(1) = 1</code> (1)。</p>
<p>再考虑稍微复杂一点：<code>c = hailstone(2)</code>，思考经历的过程。<br>
为了更加简化，我们可以先不考虑计数，只考虑<code>2</code>是怎么变成<code>1</code>的，以及其中经历的打印过程：<br>
首先打印2，之后返回<code>even(2)</code>，<br>
而<code>even(2)</code>的计算过程应当为 <code>2 // 2</code> 得到<code>1</code> ，相当于完成了与<code>2</code>相关的一步，<br>
在<code>2</code>完成之后，要对<code>1</code>执行完全相同的操作，所以应当调用<code>hailstone(1)</code> (2)。<br>
再考虑计数，我们利用递归的返回值而非全局变量进行计数，每执行一步返回值加一，意味着<code>even(2)</code>的返回值要在<code>hailstone(1)</code>的值基础上加一。(3)</p>
<p>基于以上命题(1)(2)(3)，我们考虑在递归的返回值处调用相对低阶的函数。下述还把计算写到了参数中，读者当然可以在思考时拆分开，先用临时变量做计算，再将临时变量作为参数。</p>
<pre><code class="language-python">def hailstone(n):
    &quot;&quot;&quot;Print out the hailstone sequence starting at n, 
    and return the number of elements in the sequence.
    &gt;&gt;&gt; a = hailstone(10)
    10
    5
    16
    8
    4
    2
    1
    &gt;&gt;&gt; a
    7
    &gt;&gt;&gt; b = hailstone(1)
    1
    &gt;&gt;&gt; b
    1
    &quot;&quot;&quot;
    print(n)
    if n % 2 == 0:
        return even(n)
    else:
        return odd(n)

def even(n):
    return 1 + hailstone(n // 2)

def odd(n):
    &quot;*** YOUR CODE HERE ***&quot;
    if n == 1:
        return 1
    return 1 + hailstone(3 * n + 1)
</code></pre>
<h2 id="q5-count-stair-ways">Q5: Count Stair Ways</h2>
<p>题目引导超级详细，没有其他补充。</p>
<pre><code class="language-python">def count_stair_ways(n):
    &quot;&quot;&quot;Returns the number of ways to climb up a flight of
    n stairs, moving either one step or two steps at a time.
    &gt;&gt;&gt; count_stair_ways(1)
    1
    &gt;&gt;&gt; count_stair_ways(2)
    2
    &gt;&gt;&gt; count_stair_ways(4)
    5
    &quot;&quot;&quot;
    &quot;*** YOUR CODE HERE ***&quot;
    if (n == 1):
        return 1
    elif (n == 2):
        return 2
    else:
        return count_stair_ways(n - 1) + count_stair_ways(n - 2)
</code></pre>
<h2 id="q6-sevens">Q6: Sevens</h2>
<p>有一个坑点：题目给的<code>has_seven</code>函数只实现了函数中是否含<code>7</code>的判断，而题目要求还要判断是否为<code>7</code>的倍数。</p>
<p>相比于从头到尾模拟，更适合这道题的可能是“取一个切面来模拟”。<br>
首先假定读者已经搞清楚了<code>helper function</code>封装起来的想法：如果<code>f(i, who, direction)</code>的<code>i</code>恰好等于<code>n</code>，则此时的<code>who</code>就是我们要找的<code>who</code>。用下面的案例说明，我们不妨找找内层函数<code>f</code>返回时，各参数值为多少？</p>
<pre><code class="language-python">    &gt;&gt;&gt; sevens(6, 5)
    1
    &gt;&gt;&gt; sevens(7, 5)
    2
    &gt;&gt;&gt; sevens(8, 5)
    1
</code></pre>
<p>很明显，<code>sevens(6, 5)</code>是<code>f(6, 1, 1)</code>，<code>sevens(7, 5)</code>是<code>f(7, 2, 1)</code>，<code>sevens(8, 5)</code>是<code>f(8, 1, -1)</code>。</p>
<p>以<code>sevens(7, 5)</code>从<code>f(6, 1, 1)</code>开始的思考过程为例：</p>
<p>此时<code>f(6, 1, 1)</code>这几个参数不满足<code>i == n</code>，所以经过“一些过程”，下次测试（即返回）<code>f(7, 2, -1)</code>。<code>f(7, 2, -1)</code>这几个参数满足<code>i == n</code>，返回<code>who</code>。<br>
考虑上述的“一些过程”。<code>i</code>从<code>6</code>到<code>7</code>，<code>who</code>从<code>1</code>到<code>2</code>，<code>direction</code>从<code>1</code>到<code>-1</code>。那么我们在执行<code>f(6, 1, 1)</code>的过程中，<code>who</code>是根据当前的<code>direction == 1</code>来修改的，而<code>direction</code>却是根据新的<code>(i + 1) == 7</code>来修改的，务必注意。</p>
<pre><code class="language-python">def sevens(n, k):
    &quot;&quot;&quot;Return the (clockwise) position of who says n among k players.

    &gt;&gt;&gt; sevens(2, 5)
    2
    &gt;&gt;&gt; sevens(6, 5)
    1
    &gt;&gt;&gt; sevens(7, 5)
    2
    &gt;&gt;&gt; sevens(8, 5)
    1
    &gt;&gt;&gt; sevens(9, 5)
    5
    &gt;&gt;&gt; sevens(18, 5)
    2
    &quot;&quot;&quot;

    def f(i, who, direction):
        if i == n:
            return who
        &quot;*** YOUR CODE HERE ***&quot;
        # change person
        who = who + direction

        # boundary and round
        if who == (k + 1):
            who = 1
        elif who == 0:
            who = k
            
        # switch direction
        i += 1
        if has_seven(i) or ((i % 7) == 0):
            direction = -direction
        return f(i, who, direction)

    return f(1, 1, 1)


def has_seven(n):
    if n == 0:
        return False
    elif n % 10 == 7:
        return True
    else:
        return has_seven(n // 10)

</code></pre>
<h2 id="hw02-q6-count-coins">HW02 Q6: Count Coins</h2>
<p>hw02懒得再开新一篇，于是写到这里了。</p>
<p>题目给出了一个案例：</p>
<p>For example, the following sets make change for <code>15</code>:</p>
<ul>
<li>15 1-cent coins</li>
<li>10 1-cent, 1 5-cent coins</li>
<li>5 1-cent, 2 5-cent coins</li>
<li>5 1-cent, 1 10-cent coins</li>
<li>3 5-cent coins</li>
<li>1 5-cent, 1 10-cent coin</li>
</ul>
<p>一种树状图思路如下：</p>
<figure data-type="image" tabindex="1"><img src="https://meredith2328.github.io/post-images/1724983148922.jpg" alt="" loading="lazy"></figure>
<p>我们从上往下考虑。对于每一个金额（节点），分支上的数字是小于该金额的所有金币，并且要求下面的分支的金币面额不能大于上面的分支。则题目所示的所有情况就是从根节点（值为总金额）到叶节点（值为0）路径的总数。</p>
<p>观察发现以下命题 <s>规则类怪谈</s> ：</p>
<ol>
<li>如果减到剩余的值恰为0，则计数为一。</li>
<li>（可以合并到 1. 中，用于提升计算效率）如果用到的金币面额为1，仅有后面一直用面额为1的一种情况，计数为一。</li>
<li>可以把单个节点连接三个、四个及以上的分支拆解成两个分支的情况，即图中的最小单元，且这两个分支用到的金额关系是较大和较小相邻的。两个分支总共的可能性是两个分支各自的可能性之和。</li>
</ol>
<p>从而可能的方法如下：<br>
（以下Solution1 和 Solution 1 another implement都能跑，至于Solution 2, 3, 4, ..., 114514就交给你啦（））</p>
<pre><code class="language-python">    # Solution 1

    # def helper(remain, coin):
    #     if coin == None:
    #         return 0
    #     if remain == 0:
    #         return 1 # Sum up to total.
    #     elif (coin &gt; remain):
    #         return helper(remain, next_smaller_coin(coin))
    #     else:
    #         return helper(remain - coin, coin) + helper(remain, next_smaller_coin(coin))

    # Solution 1 another implement
    def helper(remain, coin):
        if coin == 1:
            return 1
        if remain == 0:
            return 1
        elif remain &lt; 0:
            return 0
        else:
            return helper(remain - coin, coin) + helper(remain, next_smaller_coin(coin))
    return helper(remain = total, coin = 25)
</code></pre>
<p>当然，如果认真听了课，学会了 <code>count_partition</code> 那道更一般的情况，这一道题也是相似的。最终要总结出类似于以下这样的命题：</p>
<ul>
<li>In <code>count_partitions</code> from lecture, the recursive case is to partition <code>n-m</code> using parts up to size <code>m</code> <strong>and</strong> to partition <code>n</code> using parts up to size <code>m-1</code>. （引自 <a href="https://cs61a.org/disc/disc04/">Discussion 4 | CS 61A Summer 2024</a> ）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[freshdan 新生wiki项目]]></title>
        <id>https://meredith2328.github.io/post/freshdan-xin-sheng-wiki-xiang-mu/</id>
        <link href="https://meredith2328.github.io/post/freshdan-xin-sheng-wiki-xiang-mu/">
        </link>
        <updated>2024-08-26T09:26:23.000Z</updated>
        <summary type="html"><![CDATA[<p>已发布至 <a href="https://meredith2328.github.io/fduWiki/#/">freshdan</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>已发布至 <a href="https://meredith2328.github.io/fduWiki/#/">freshdan</a></p>
<!-- more -->
<p>假期内跟 <a href="https://github.com/JingYiJun">@Jingyijun</a> 老师聊天时画了这个饼，和 <a href="https://github.com/CodingMizore">某人</a> 激烈交流、以及参考了 <a href="https://github.com/Cameudis">@Cameudis</a> 老师的意见之后，终于成为一个比较完整的项目。</p>
<p>当前涉及“怎样选课、各类课程简介、GPA介绍、搜集信息、常用资源介绍、大学与自学”共计六部分内容，基本把我能想到的比较重要的东西都涵盖到了。作为读了两遍大一的双倍小登，读大一这个事情我还是比较有经验的（雾）之后有什么其他应当写的，大概需要朋友们提提建议。</p>
<p>对于后续完善发展，考虑过添加社团社群圈子wiki，由各社团及学生组织负责人编写自己组织的相关资料和联系信息，这样的话会比现在靠公众号、百团、口口相传的宣传效果要更好，同时也应当有助于增加人手、积极完善更新。但这个饼不是靠我自己能做的。想要多结交一些志同道合的朋友。</p>
<p>freshdan/鲜蛋，先这样吧。</p>
]]></content>
    </entry>
</feed>